{
    "title": "Ten best practices for modern app development",
    "presentation_type": "Breakout",
    "categories": [
        "Application Developers",
        "DEV203"
    ],
    "video_id": "UB27PFqkFHQ",
    "time": "Aug 30 01:45 PM - 02:30 PM CDT",
    "transcript": "[Music]thank youhello and welcome to 10 best practicesin modern app development I'm AndreHammerlyI'm a developer relations manager hereat Google cloud and the team I manage isactually the modern development advocacyteam which is why I'm up here on stagetoday I'm lucky to be joined on stage byAudrey Joseph from two Sigma can youtell us a little bit about yourself anda little bit about two Sigma hi uh MITJosephI'm a managing director andit for Enterprise platform engineeringat two SigmaI have been with them for six years andhave been part of two sigma'sapplication modernization and Cloudadoption Journeythis slide it's a legal slide and itsays I won't be giving any investmentadvice as part of this technicalpresentation and legal aside I'm alsonot the right person to give anyFinancial advicethank youlet me start with a brief introductionof two Sigmatwo Sigma is a diversified financialservices company that use systematicapproaches to run the businesswe discover value in world's datawe utilize a large amount of data andcompute along with our own FinancialInsightsto generate strategies that run ourbusinesses across investment managementsecuritiesInsurance real estate and morewe use vast computing power to onboardlarge amount of data and test ourhypothesis at scaleat Peak we use more than 1.5 millionvcpus and 10 petabytes of RAMour storage systems serve more than 300petabytes of data every weekwith that introduction let's get intothe topic of our sessionso before we can talk about bestpractices or practices for modern appdevelopment let's all get on the samepage about what we think modern appdevelopment even is so I just first of Iwant to make it clear that we're notjust talking about developmentdevelopment coding we're talking aboutwe're going to talk about the entiresoftware delivery life cycle todaynext slideso for the purposes of this talk in thisroom todaywe're going to say that modern appdevelopment has the followingcharacteristics it's Cloud first andcontainer based in modern appdevelopment the primary softwareartifact is a containermodern app development also usesautomated repeatable processes forthings like testing validation buildsand monitoringand modern app development usually butnot always breaks down applications intocomposable and modular services thisallows water maximum flexibility whenyou're building your applications andputting your pieces together and itallows different teams to work ondifferent pieces in parallel so why theheck would you even do this next slideThe Accelerated state of devops reportactually has a lot of reasons to do thisbut I'm going to only go into a coupleof them right now if you want to knowmore you can talk to the Dora folksdownstairsthere are kind of two big categories ofbenefits one is reduce friction for yourteamso modern practices can reduce the timeon a time it takes for you to get codeto productionthey can also make it easier to deployfrequency which also helps you get codereduction fasterthat is less friction for your employeesand it makes it easier for them to dotheir jobs and innovate and add valuefor your customersanother benefit that you'll see isincreased reliabilitymodern practices reduce the likelihoodthat your changes cause problems and ifthey do because you can deploy moreeasily and you have less frictiongetting to prod you can push the fixfaster that means your site is more yourside of your application or your serviceis more reliable to the downstreamconsumersbutthe next slidemodern app development is a journey noone does it perfectly and not all thesepractices fit every team some teamslooked at composable modular servicesand they're like nope monoliths for usall the waycool if that's where you're at if aspecific practice doesn't speak to youdoesn't help your org that's greatwe all do what we can and we're allgoing to take baby steps you can't adoptall these practices at once if you'renot using any of them choose somethingthat makes looks like it's going to workfor your team looks like it'll beimpactful and start thereso with that let's actually just giveyou a quick overview of all of our bestpractices uh uh first of all this listis non-exhaustive these are 10 that wefelt were impactful but there might besomething that we left off the list thatyou think is more impactfulalsowe aren't actually ranking these in anyparticular order we tried to kind ofmake them flow well together but numberone isn't necessarily more importantthan number 10. partly because like Ianswered everything in softwaredevelopment it depends it's going todepend on a lot of factors which one ofthese will be most impactful for yourteamso let's actually dive into the meat ofthe talk nowall right the first onebefore we discuss designing statelessServices let me Define what a statelessservice is a stateless service is asoftware component that does not retainany information about its previousrequeststhe key principles of Designingstateless Services is to decouple themfrom each otherso let's talk about some of the benefitsof stateless servicesdesigning your application components asstateless services will make it easierto scale but because it does not retainany local stateit improves resiliency because failurescan be addressed by bringing anotherinstancealso if one of the components fail itmay not impact the entire applicationstateless Services makes it easier totest and debugbecauseyour components are not coupled witheach otherit also enables rapid changes becauseyou can make a change to one componentand deploy that independentlynow let's get into some of the bestpractices for Designing statelessServices one of the first steps forimplementing your application asstateless Services is to divide theminto Loosely coupled components orservices with clearly defined interfacesyou should try to useeven driven architecture so for yourservices to decouple them and eventhrough an architecture the servicescommunicate with each other byexchanging eventsunlike monolithic application backendsyou should try to use independent datastores for your servicesyou should also try to utilizeimmutable backends so whether it'sserverless or containers for yourservices so that it doesn't retain anylocal state within the within yourinfrastructureso next best practice is a best practiceI'll talk about is designing for scalewhen designing applications while wegive lot of importance to businessfunctionality we should also plan forapplications to scaleour applications are expected to provideconsistent user experience under loadwithout impacting the performance andreliability our businesses grow ourapplications experiencehigh demand at certain periods of timeand sometimes unexpectedlyadditionally planning for scale alsohelps with cost savings because youdon't have to over provision for thepeak demandin case of two Sigma We Grew Fromrunning our research on a small numberof bare metal machines in our office tothousands of VMS running acrossseveral kubernetes clusters in multipleregions[Music]open source and cloud providerTechnologies and also implementing toolswhere gaps existedone such example is where we implementedan open sourced a fair scheduler knownas cookthat schedules workloads across multiplecompute pools across kubernetes clusterswe gave a deep dive talk on Kirk in2018.now when you design your applicationsfor scale there are severalconsiderations the first one I want totalk about is horizontal versus verticalscaling in horizontal scaling you addmore instances of your applicationwhereas in vertical scaling you add moreresources such as CPU or memory to yourexisting instancesthe choice depends on your applicationarchitecture if your application isimplemented as a stateless service andCPU bound horizontal scaling may be agood choicewhen you want to scale your servicehorizontally utilizing the auto scalingcapabilities of your orchestrator forexample if you're using kubernetes willavoid over provisioning costs and manualinvolvementAuto scaling could be based on the CPUusage or request countyou can leverage load balances to evenlydistribute your the requests across yourservice instancesyou may also want to utilize cachingstrategies so that you reduce the loadon your databases or storage and reducelatency and there are several cachingproducts available whether it's redis ormemcache D2 so that you can Implementyour own caching strategiesin we discuss asynchronous or evendriven communication patternsum you could you could utilize that toallow decoupling of your services andand also that allows scaling thecomponents independentlyas you design your application for scaleyou should also implementperformance and load testing as part ofyour CI Pipelinesearlier when we discussed the bestpractices for stateless Services wetalked about utilizing immutableinfrastructure such as containers nextwe will talk about why and how tooptimize your containersso optimizing containers could be a 45minute talk of itself and we don't havethe time so so I'll talk about some ofthe very basic techniques in containeroptimization today and I'm primarilygoing to focus on reducing containersizenext slideso why the heck would you optimize yourcontainers at all why would you worryabout how big they aresmaller containers have two bigadvantages the first one is speedsmaller containers usually but notalways build fastersmaller containers usually but notalways start up fasterand smaller containers almost alwaystransport across the network faster thespeed of light is a constanton the maintainability side your smallercontainer is usually going to have fewerdependencies that you need to trackmake sure that our you're using the mostcorrect versions of and if there's lessof that maintenance work of yourdependencies less of that maintenancework of components it's going to beeasier to keep that container patchedand up to dateso how the heck do you do this nextslideum it sounds straightforward but havingbeen through this exercise with a numberof containers it can actually be alittle harder in practiceStep One is picking an appropriate baseimage and I know some of you were likeobviously but this is actually hard alot of people start with a kind of bigbass image while they're doing theirproof of concept so they don't have topull a lot of extra dependencies in andfigure that outthat's awesome but once you're gettingready to go to prod you need to go to asmaller image that doesn't have anythingyou're not usingum you can you can also experiment withcaching the space image sometimes to seeif that speeds up your build timesyour small base image you need then youneed to add back your dependencies andthis is where I see a lot of teamsstruggle you want to only add back thedependencies you actually need inproduction to your production containerwhich means your test dependencies yourDev time dependencies those don't growin your production container some teamshave had success by building theirproduction container first and thenbuilding a tester Dev container withthose extra dependencies on top of thatproduction container so that the baseimages are very similar and ideallyyou're reducing those works on mymachine problemsso that is the shortest version of thebasics of optimizing containersnow that you have the containers how theheck do you build them and deploy themlet's talk about our next practiceall right infrastructure as codeinfrastructure as code or I will referto as IEC is a practice of managing andprovisioning infrastructure using Codeopen leveraging declarative languagesso in a declarative language you definethe target state that you want toachieve for your infrastructureall of the infrastructure resourceswhether it's networks servers yourstorage your databasesyou will you will Define in a in codeand this code is utilized to provisionand manage the infrastructureso there are a lot of benefits to usingIAC for your managing yourinfrastructure I just want to refer tosome of them the first one is efficiencyautomating your infrastructureprovisioning money and managementsaves time and reduce human errors italso encourages collaboration betweenteams with modularitynext one is scalabilitywith IAC you can easily replicate yourenvironment whether it's for expandingto a new geographic region or creatingmore dust and main elementswhen also defining infrastructure ascode improves the security by reducinghuman error enabling change tracking andsecurity vulnerability detection usingtools automated tools or with manualreview whatever your approach isthe last one I want to discuss isconsistency with info infrastructure ascodeprovides consistency by reducing driftsbetween multiple environments that youhavethere are multiple steps forimplementing infrastructure as code thefirst one is probably to choose theright tool for youmost popular tools include terraformansible Chef puppet and and there areprobably other ones as well once youonce you choose the two the next step isto Define your infrastructure in alanguage supported by the toolyou also have to choose a source controlmechanism so that you have a versiontrackingfor for the configuration files or thethe infrastructure that is you havedefined in codegit is a popular uh choice for Sourcecontrol for ISCand then once you have definedyour infrastructure the next step isfiguring out how you automate the managethe provisioning and management of itthis can be usually done by CI CDPipelinesonce infrastructure is provisioned youneed to have monitoring to identifyissues and being able to address itwe'll discuss monitoring andobservability in general later in thepresentationSo within two Sigma we utilize terraformfor terraform as an infrastructure ascode tool to manage our Cloudinfrastructureit has support forall the major Cloud providersresources and servicesin case of gcp terraform Google cloudprovider is jointly developed by Googleand hesicorp and he's probably one ofthe mature and well-supported providerswithin gcp you can use cloud build toapply the changes automatically to yourenvironment we will be discussing Cloudbuild in more detaillater in the presentationterraform also support githubsso next we'll discuss the importance ofslight change Security in modernapplicationsso one of the things that doing thingslike infrastructure is code usingstateless Services brings in and some ofthe practices we'll talk about laterbrings in is the ability to have morecontrol of your supply chainso let's look at the next slidewhere I have given the absolute simplestsupply chain diagram ever this again isa high level overviewand if you don't take anything else outof this section of the talk I want youto take the next pictureas your takeawayyour supply chain is vulnerable at everystep of the way that's the big thing youcan have vulnerabilities that come inVia dependencies are some of the mostcommon ones we hear about things likedependencies having a vulnerability orpotentially getting the wrong dependencydue to a typo but every step of the waythere is some sort of vulnerability thatyou should be thinking about anddeciding how that works with yourcompany's security profiles and risktoleranceso what can you do about it well noone's ever going to be able to say thattheir thing is going to solve all ofyour supply chain security problems andif they do I'd like to talk to them butthere are a couple tools available toyou so let's look at the ones we have onGoogle Cloudfirst Cloud build we talked about thislast year but Cloud build could producesocial compliant build provenance sothat you can understand how yourartifacts were built and what sourcesthey came fromartifact registry allows you to storethose artifacts and language packages inone place so all of your things aretogether it's easier to track what'sgoing on where the artifacts are thehistory of them EtcI really like artifact analysis it'sawesome it scans yourart like about it is it will continuallyupdate that vulnerability metadata for30 days after the initial scan so if youbuild something on Friday and a newvulnerability or zero day comes out onMonday it will update and let you knowif that artifact you built on Friday hasthat new vulnerability in it I've seenit do this for me multiple times and itis Handyand lastly binary authorization lets youset rules this is that line between thebuild and deploy statethat all of your deployments need to bemade certain requirements that you setmaybe all of your builds need to becryptographically signed before youallow them to be deployed or maybe allof them except that one container fromthat one supplier that we trust but theyhaven't gone around to adding theirsignatures to their containers yetyou can set it up you can set it upwherever you want and so it gives youthat information and make sure that thestuff you're deploying is what you thinkyou're deployingso all of this stuff plays together withthe next topic which is cloud nativerelease Pipelinesall the tools I just talked about usecloud native release pipelines so forthis talk Cloud native release Pipelineand Cloud native CI CDare things that use the power of thecloud to scale horizontally and allowyou to run multiple builds at the sametime or zero builds at the same timethey allow you to run all of your buildsin the same environment so that you cansee what's happening you can understandthat if you need to control that in someway with security parameters or usingprivate pools you canso let's look at the next slide we havea bunch of tools we've already talkedabout them a bunch so I'm not going togo into a ton of detail here but Cloudbuild is our Cloud native CI CD pipelineit works with all the programminglanguages that I've ever seen anyone tryI'm pretty sure I've seen someone throwFortran at it I know I've seen someonethrow Cobalt at itand you can configure it in a lot ofdifferent ways to meet your needs youcan do private pools and things likethatCloud deploy is the continuousdeployment solution that hangs out withCloud build I really like it because ithelps you visualize the state of yoursystem especially if you're doing acomplex multi-phase rollout it lets youknow what's done what's still inprogress at a glance it works with gkeCloud run and anthos and recently in thelast six months or so we added supportfor parallel deployments in multipletargets so if you've looked at it lastyear and you're like not quite there yetI recommend you check it out againbutI care enough about this particularpractice that you should be usingautomated cloud-based CI CD pipelinesthat I don't care use whatever worksjust please do this uh so actually whatdoes two Sigma do here so depending onthe the team or the the business that wehave we have a couple of tools that weuse one of them is Jenkins we use alsoGitHub actions in some other casesyeah more examples of the whole itdepends solutions to best practicesall right sowhen you start developing an applicationteams have to make decisions on whenwhen to use manage services versusimplementing and operating onethemselves because something that youmight have implemented already or youwant to your engineers are interested inimplementing it so there are severaladvantages for using managed Serviceswhether provided by Cloud providers orSAS offerings that are availableso even though there are advantagesthere are also some long-termconsiderations that you have to takeinto accountso we'll start with some of theadvantagesthe managed service is free up yourengineering resources to focus on thebusiness problemand not spend the time on probably abuilding and operating a service thathas become commodity these dayscloud provider managed Services haveelastic scale well-defined SLAavailability and 24 7 supportwhile this can be implemented by yourlike large engineering teams it requiresconsiderable effortwith reduced reduce engineering andoperational cost and the pay as you gomodel that you have available in thecloudthere is a good chance that you canreduce thetotal cost of ownership or TCO for yourapplication by utilizing managedservicesthat saidwhile there are a lot of benefits thereare also some considerationswould using managed Services createvendor lock-in for you for yourorganization and how important that isfor your organizationcan you utilize standard abstractionswhile utilizing those serviceswithin two Sigma we use several managedservices within our environment whetherit's actually behind our platformabstractions as a backendor directly particularly when they offerstandard abstractionsstandard interfacessofor example and there are cloud servicesthat provide such standard interface sofor example DCS have an S3 or an XML APIright and databases like several of thecloud provider databases offers postgresas the standard interface right soso that is one consideration like whichServices you want to use can you usestandard services or you have your ownplatform abstractions that you consideras generic and can be used widelyother other consideration is how muchcustomization you needrightsee in some cases you if you need likehigh customization cloud providerServices may not provide thatthe last one I want to discuss here isthat this is not a complete list in anyway uh this is just some of theconsiderationsum another one is cost itself you cansee the cost is on both sides and insome cases the managed service cost maybe very high for the capability thatyou're using from the managed service orthe value that you get out of thatmanaged service so that is anotherconsiderationnext we will talk about observabilityand this is probably very important forall of youso observability next slide is the thingthat we all know we need to do and a lotof us put off until the very end and weshould probably not do that doing thisright really helps your team be moreefficient and be able to iterate a lotfaster so I'm going to go over thispretty quickly let's talk about why theheck you'd even want to do thisespecially in a cloud native environmentor a modern modern development practiceenvironment first of all if you got abunch of systems a bunch of servicesthat you're composing you're doing amicroservices setup centralized loggingis key you need to be able to seeeverything in one place you need to beable to see how requests move throughthe system related to that whole howrequests move through the system thing agood tracing system open Telemetry isone of them there are others that canhelp you see how a user's requeststarted at your front end went throughthree different back-end Services hitthe payment service hit the shippingservice and then trickle this all theway back forward is really really goodwhen you get those weird bugs that onlyshow up in production so having a way toset that up really really helpsand the final thing is you need to havealerts and I am a big fan of making sureyour alerts are actionable I know we allwrite non-actionable alerts but havinggood alerting practices and goodmonitoring practices set up reallyreally helps your ability to iteratefaster because you know about issues asquickly as possible and you can fix themit also means that if you're doing amulti-stage deployment if something goeswrong with that deployment you can stopthe deployment before it gets toeveryoneso we have some tools for this on GoogleCloud because of course we do next slidethe big one is called operation Suiteit's got all the things it's got loggingmonitoring alertingtracing profiling all the stuff is inthere I really like it it's a fantasticthing if you're using our productsbecause you can just pull everythinginto one place and then we've actuallydemoed some really cool stuff yesterdayand I think again this morning in thedev keynote showing how some of the duetstuff works with our Cloud operationSuiteuh however I don't know about you but Ihave totally had to reboot servers fromthe parking lot of the fast food chainbefore because I was on call and thepager went off well cell phone so ifyou're a person like me who's been inthat situation may I politely recommendthe Google Cloud mobile app it lets yousee on your phone what's going on withyour clusters what's going on with yourapplication so if you too end up in theparking lot of a fast food chain orpulling into a lot Public Libraryparking lot because you know they haveWi-Fi you can you know hopefully nothave to do what I did and whip out thelaptopuh two more left let's do the next oneall right so managing costs so even ifyou don't adopt any of the other bestpractices that we have discussed in thesession for some of you this may be themost important onesoalso if you have been looking at thethese presentation or observing thispresentation we for all the other bestpractices we also we had why and how forthis one we decided not to have itbecause it's obviousso Cloud offers a lot of flexibilityscale and ability to use resources rightwide variety of resources since the thecapacity or availability of thatresources is not limited as how inon-prem data centers it is crucial tomanage your costsproper cost management will help you toguess get the most value out of yourCloud investmentso we'll discuss some of the bestpractices that could help you to manageyour costs effectively so the first oneis that you need to know who is actuallyusing the resource and who is incurringthe cars so you need to have the theright cost attribution transparency andmonitoringyou can use whether it's Cloud projectsallocation tags and labels to attributethe resource usage and costs acrossprojects departments or other accountingunits that you have in your organizationwhile Google console is a good tool toto view costs and do some analysis youcould also export your billing data tobigquery to do ad hoc analysis or somecomplex Analyticsbut there are also other vendor toolsavailable for you to do cost analysisand visualizationone of the key thing to remember is thatcost cost management is not a one-timeexerciseit requires regular monitoring andoptimizationnow let's talk about the some of thecost optimization best practices basedon our experienceso we discussed about like earlierthroughout like in in multiple bestpractices we talked about utilizing Autoscaling capabilitiesso this will this will helps to avoidthe over provisioning costs to manage tomeet the peak demandso the next one is utilizing the rightmachine types for your workloads whetherit's CPUs or gpus you should monitor theutilization of those machines andwhether it's moved to different machinetype or right size themforeigncan you use sport machines which are waycheaper than the on-demand machinesand you should be able to use spotmachines as long as your application cantolerate preemption or can continue froma checkpointed stateso in two Sigma we implemented a toolcalled Fast freeze which which can checkpoint and restoreapplication State running in containersso this helps us in our case to use thespot machines where possible fast freezeis a open source tool and you can findmore information about it on opensource.2sigma.comthe next one is implementing life cyclemanagement for your resourcesthere are capabilities available withinCloud providers to Define life cyclemanagement for your resources forexample you can Define lifecyclemanagement rules for your GCS bucketsright that will transition the objectsthat are all to colder colder classeswithin GCS line cycle management alsoapplies to other resources whether it'scomputed machines or persistent disksand other othersso the next one is aboutminimizing or optimizing the datatransferif you are transferring data acrosszones or regions or Cloud providers thecost could increase as you scale andutilize more datathe last one that I want to discuss iscommitted usage discount so if yourresource usage is stable committed usagediscounts could be useful by bycommitting to use certain resources fora period of time and getting discountfrom your cloud providerso with that let's discuss cloud-baseddevelopment which is our last onecouple minutes left to stepsubstance so cloud-based development isnew to a lot of folks let's go to thenext slide I'm just going to say what itis is it's not having your developmentbox you know a nice pretty tower underyour desk but instead having the machineyou do your development on sitting in acloud data center somewhere I've beendoing this for a while and I gotta say Ididn't like it at first I'm a fan now ittook a while to convince me and I'm intoit it's how I've been doing a lot of mydevelopment work actually most all of mydevelopment work for at least the lastyearso why would you even do thisum it's way faster to set up a Devenvironment I don't know about y'allI've got a pile of dot files sitting onthe internet and source and every time Igo to set up a new Dev environment Ihave to update them and even with thoseit takes me a couple days to set up anew machinealso if I hatch something if I need anew version of say my nameand if I need to help someone else getset up it takes even longerwith a container-based cloud-baseddevelopment environment I update thecontainer or pull a new image if I'mjust using a public container and I havea new machine this is especially good ifyou tend to break your developmentenvironments you can just leave thebroken one over there and turn it offand make a new one or if you need towork on two or three projectssimultaneously say you're a consultantyou can have multiple different machinesthat you use with the configurationsthat you needall of that leads to huge productivitygains is faster I have my machine when Ineed it and it also leads to reducedcost I don't need to pay for adevelopment environment that's sittingthere not doing anything when I'm asleepor when I'm eating or when I'm hangingout with my family I only pay for itwhen I use it and it's a pretty muchinstant on when I need it so it doesn'tmatter when I need it it's there for meand it also tends to reduce works on mymachine problems if everyone'sstandardized was on the same containerimage so Google of course has a solutionfor this next slideCloud workstations we've talked about ita bunch over the last yearthis is just a development environmentin the cloud you set up container imagesyou can set up ones for your team maybeyou have one for the back end people anda really nice GPU based oneAI people or you know something similarand they create instances as they needthem spin up spin down automatically youcan use it with vs code you can use itwith all your favorite jetbrains IdesI use it I really like it it's reallyreally great for doing Development I'veeven actually done serious developmentand built containers while on anairplane this way because all of that'shappening in the cloud all I got to dois send the characters over the over thewire and that was kind of magical for menot used to being able to do containerbuilds over airplane Wi-Fiso we've hit all of 10 and why don't youtell us our key takeaways here all rightso let me quickly summarize what we havediscussed so farso the applications that we build rightnow require characteristics such asresiliency portability scalability andimproved security to meet the businessgoalsthe modern application best practicescould help to meet these requirements wediscussed 10 of those best practices inthis sessionbut every company star may start theapplication modernization Journey adifferent point and with different bestpractices if you're starting a newapplication you could be using lot moreright a lot more than few like you maybe using lotwhile if you have an existing monolithicapplication you are and modernizing isthat you will be moving doing it initerative fashion starting with a coupleof them and then moving to taking thatJourney forwardso you have to evaluate the state ofyour application and decide what is thebest path forward for youforeign"
}
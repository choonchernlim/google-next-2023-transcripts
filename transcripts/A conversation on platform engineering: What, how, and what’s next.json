{
    "title": "A conversation on platform engineering: What, how, and what\u2019s next",
    "presentation_type": "Breakout",
    "categories": [
        "DevOps, IT Ops, Platform Engineers, SREs",
        "OPS100"
    ],
    "video_id": "lJSiynhxdG4",
    "time": "Aug 30 04:15 PM - 05:00 PM CDT",
    "transcript": "[Music]hi everyone thank you so much for takingtime out of your busy next schedule tojoin us today my name is Megan O'KeefeI'm a developer advocate here at GoogleCloud I'm so thrilled today to be joinedby four wonderful panelists to chat allthings platform engineering raise yourhand if this is a topic that is a out ofexciting to you or you're you're here tookay good you're in the right room thatwas mostly that that was what I waschecking awesome so um yeah with the plpanelists go ahead and like to introducethemselves Evan wood uh director ofcloud engineering at HomeDepot I'm Tim Hansen engineer on thebackstage team atSpotify I'm denish um I'm the staffengineer Tech lead of the platforminfrastructure from merari I'm DavidFaircloth director of platformengineering at the Wendy's companyawesome great so thrilled to have all ofyou here today I guess I kind of want tostart with a very broad general questionI think we hear a lot about devopsplatform engineering these terms thatare that mean different things todifferent people I'm curious for each ofyou in your organization what doesplatform engineering mean rightnow so we've been doing platforms ofsome form at Home Depot web spere awhile ago PCF for a while um so I thinkthe big shift for us is actuallydeveloping our own platforms versusmanaging and running the platforms um aswe've done in thepast yeah platform has been around along time at Spotify started years andyears ago we had tons of productionincidents one week and we were likesomeone needs to watch after theinfrastructure basically and that wasyears ago now and now we have a hugeplatform organization um so really it'san accelerent for us for the rest of ourteams yep for merari platformengineering is um uh providing securereliable and scalable infrastructure toour developers and so that they canbasically deploy and uh build and deploytheir applications on the platform yplatform engineering is actually apretty New Concept for us here atWendy's um we've through the years anddoing Cloud things uh you have bits andparts of systems that are owned bydifferent people and different teams soyou have the security and networking andall the different teams have a littlebit of piece of the pie and what werealize with that is when that happensnobody really owns anything so we tookthis extreme ownership approach with PLplatform engineering where we have ateam that owns the whole stack exceptsoup nuts so if it's a networkingproblem it's one team's doing that orsecurity or whatever it is um with thatwe've been able to usher in that devopsculture of Partners ship and what thatmeans across the stack so um for us itreally means that extreme ownership uhand really the implementation of thatdevops culture of collaboration andcommunication thanks all kind of movingmore into the sort of uh how and andwhat I'm curious organizationally howyour platform team is is structured ummaybe team size um the kinds of skillsyou look for in your platform team andkind of you know the domain ofexpertise I have to first say that thereare many platform teams at Home Depo souh talking about kind of uh applicationplatforms um my team which also handlesmost of cloud uh from a kind ofgovernance uh security perspective umwe're about 50 people uh about 15 ofthose software engineers and then a mixof uh systems engineering skills tosupport the underlyinginfrastructureyeah at Spotify we have a pretty bigteam for our platform organization it'sactually a whole organization um butthey look after not only infrastructurebut also developer Effectiveness anddeveloperexperience um and we've found the needto create even more platforms as we'vegone along so we have a Commerceplatform that handles paymentsthroughoutSpotify um but our real goal is just tomake de Vel opers faster you knowwhatever that means whether it'smanaging the infrastructure for them orproviding the tools that they need to dotheir job moreefficiently yep uh same for marari aswell so um we have a platform divisionwhich is divided into four differentteams so platform uh DX which is thedeveloper experience who looks after thedeveloper productivity and experience uhof our platform basically uh then wehave a um cicd team who looks after thecicd uh requirements for our users thenwe have um platform Network team andplatform infrastructure team so both ofthem looks after the their dedicatedspace so Network space is handled byNetwork team and Cloud infra is handledby platform infra team which is my teamuh we also have observability uhresponsibility as well so theobservability for uh the applicationswhich are deployed on the platform aswell as observability for the platformitself and on top of that observabilityfor the observability aswell uh we take a lot of the sameapproaches that Tim was talking about umdeveloper productivity uh time to marketfor applications and those types ofthings but we also from a team siizperspective uh do a two two pizza boxteam um we're we're pretty big fans ofteams of six to eight people that can befed by two pizza boxes that they canremain small and Nimble to do what youwant to to and Achieve what you wantthem to without the whole analysisparalysis aspect to it you get too manysmart rooms uh smart people into a roomand you kind of get analysis paralysisgoing on and we try to stay away fromthat by keeping our team small andNimble gotcha thank you sort of goingoff of that what I'm curious about iskind of the interactions between teamsso you mentioned some of you havemultiple platform teams that have towork together and then of course there'sthe interface between the platform teamsand their stakeholders all of theapplication developers and analysts andall the people that they're serving canyou talk a bit about how that workswithin your or um and maybe somechallenges you'vehad sure that's where most of my time isspent so I yeah I think that you firstand foremost and I think people canrelate is getting cyber on board earlyum in partnering heavily with theircyber team um and they're hugesupporters at this point they look tothe things we make sure that the latestcyber goodness is baked into theplatform and then they're comfortablepointing uh uh teams to the platform touse because of that so um then it'srelationships with all of thedevelopment directors uh that are outthere and there's they all havedifferent needs and and wants um and soreally it's a it's we're constantlyworking with the both the developercommunity and the cyber community tomake sure and the SRE Community uh tomake sure that everything's baked in uhuh to meet theneeds yeah as far as teams workingtogether at Spotify um we we structuredteams under product areas so if you havea bunch of teams that are looking at thesame sort of thing you know they'reexpected to work together and you canstructure that in your org and there'sthis whole question of like should yourorg match your technology basically sowe've looked at that tried to figure outyou know how best to structure our teamsand uh how can we get them collaboratingwelltogether yep um yeah in marari basicallyall the platform uh teams basically theythey share the release cycle and uh therelease candidates basically so thatthey can create um um output for ourdevelopers so we uh follow platform as auh product principles so by followingthat principle we would like to deliveruh platform offerings or platformdeliverables to our um uh users who arethe developers and working with thedevelopment teams we basically um makeuse of the user surveys interviews to uhget to know them what are their problemshow they are dealing with uh the sdlclife cycle uh the development life cyclebasically and um and we also havestarted to have uh dedicated TPMS forour uh platform uh group itself sofollowing the platform as a productmindsetyep yeah I think back to what everyonewas saying too about collaboration andgetting cyber security on board andeverything like that it's it's reallythat with all of our partners um so theway we've implemented it with thecollaboration working with other teamsis openness um anybody's invited to ourstand-ups any day come to it find outwhat we're working on give us feedbackswe also have um weekly touch points withall of our other stakeholder groups likecyber security where we meet with themor they come alongside and they'll do acouple of Sprints with us those types ofthings um but with that you also have toworry about the unplanned work aspect toit um that all those collaborationpoints are going to have to it so weactually run what we call patrolman sowe actually have one engineer on ourteam that's dedicated for a day a weekthat he is going to focus on theunplanned work that comes in so if wehave a developer that has a question orsomebody needs access to something orhow to get started in those types ofquestions they just come and hit us upin a channel our patrolman's alreadydedicated to taking that work and whatthat allows the rest of the team to dois focus on their deep work and movetheir cards through so that's really howwe've decided to take that on as a groupis you know we have our state of theplatform monthly we have our stand-upsdaily that people can join but also wehave that unplanned work aspect therethat we can plan for um and make surethat the rest of the team is dedicatedfor that deep work super interestingthanks all all right let's dive intosome of the uh n nitty-gritty here soI'm curious for each of you and each ofyour orgs what do you use to build yourplatform is it handrolled do you useopen source tools do you uh you know usea combination do you have multipleplatforms I'm very very curiousand I I think high level I think of usat my team managing three platforms oneis the cloud management platform weprimarily use Hashi cor stack for thatum and we buy the co the using usingcommercial software for a number ofyears now um the managed applicationplatform we're building is based on gkeuh so I think a component uh familiarbut then we're using terraform toautomate everything around it in theprojectum I also say uh Google workflows uh foran orchestrator I think in building aplatform you have to have some kind oforchestration um we've adopted Google uhworkflows which has been awesomecode-based workflow engine um to to helpwiththat yeah we use a lot of differentTechnologies we use a bunch of OpenSource Technologies uh we run most ofour workloads on gkesimilarly uh we have our own in-house uhdeveloped developer portal calledbackstage which is now open source umand we made that years and years agothere was nothing out there at the timethat existed that served that need sosomething we had to kind of inventinhouse and it's something that we'veshared out with the open sourceCommunity now because we love opensource you know we we want to be goodcitizens um but we use tons of OpenSource tools like Jenkin flight you knowgkeEtc yep for merari we uh use of theShelf tools uh basically um lot of ourworkload is already on uh gcp so we usegcp comput then um kubernetes enginethen we use cloud build for our monorrepo CI um where we run terraform insideit then we use cloud storage for forstoring our um artifacts and logs uhthen uh we use artifacts registry aswell container registry uh we are in themigration phase of uh container registryto artifact registry at the moment umfor deployment uh delivery basically weuse uh Spiner um then uh we also startedto use Argo CD so for that as well weare in the middle of migration um thenuh uh we also have have uh selfhosted uhGitHub Runners which is the custom umbuild solution inside our platform groupthen we have um aum secure CI that we call it so that isactually based upon the cloud build uhand we run terraform inside it uh wealso have temporary access management weum follow the zero touch production umprinciple where we don't allowby default access to our servicedevelopers so they if they want to haveaccess they can basically quickly goahead and uh uh submit a workflow fortemporary access which will be um uhgranted immediately after approval bythe owner team and it is time bound soit will be uh revoked after a certaintime uh yeahthat's we take the same approach um oneof our platform principles is preferservice offerings we available andappropriate um so we choose to there'san open source tool out there let's golook at that and use that at allpossible there's certain times thatthat's not going to work so we'll go anduse a tool that we have to pay for umthe only time that we build stuff inhouse is if it's not available out therealready yet or if it provides acompetitive Advantage for us so thoseare the only two times that we'llactually build it in house ourselves butwe typically try to prefer those opensource toolings I mean we're backstagefans um love it it's a great Tool uh ifyou haven't checked it out yet go checkit out there's a plug for Tim um butyeah that's that's how we decide to appreverything is is platforms are reallyjust a big old puzzle and you have to beable to find the right puzzle piecethat's going to fit into it to give youwhat you want and so it's creating thoseintegration points but it's back toanother platform principle of automationtoo of you need to automate all thethings and that's really where the thekey aspects come in is go and identifywhat your tools are going to be and youspend your time automating it so yourdevelopers don't have to worry aboutthoseaspects nice well uh all of yallmentioned a bunch of interesting gcpproducts and and open source tools whichis very interesting to me want to comeback to that before we do I'd love tohear from each of you about kind of thecore features in your internal platformso you know in a tool like backstageright you've got Tech docs and andself-service and software catalog whatwould you say are maybe the top two orthree features in your platform and kindof um you know at what is at the core ofof what you're building for yourdeps so and to go back toself-service um which is really thedifference between just providing inAutomation and providing experience forour developers um to get what they needwith as little friction as possible umwe spend a lot of time uh working onself-service we we're not usingbackstage uh but I like it uh because westarted about a couple years ago uhbuilding our own portal um and so thatwas a tough decision to do but I thinkthat when you look at a lot of the toolsThe open- Source tools uh and Commercialtools one of the things that's lackingin is a great self-service option thatmeets Home Depot's needs uh where we areand so we knew we were going to have tocustomize um and and so we went on thatAdventure um and it's worked out uhpretty well so far but on self-serviceproduct mindset I'd say is uh changingeven my own developers from thinkingabout just providing a good script or agood set of automation but to reallythinking about our developers ascustomers that we have to serve and whattheir needs really are and then makingthe interface in a way that's good for adeveloper uh and and put a lot of focuson that so I just say for product uhsorry for uh platform Engineering ingeneral is the product mindset for usthat really helps us so the technologyselections areimportant but making sure that it'sknowing who your customer is andbuilding that self-service option isreally the the key to it for usyeah I definitely Echo some of thosesentiments um we always treat developersas customers in our platformorganization and we've even had you knowmarketing teams uh marketing thingsinternally because you need to treatEngineers as a customer especially atSpotify when we're soautonomous um you can't just dictatethat teams will use your platform nomatter what you know there's a lot offreedom there but the core features I'dsay of Backstage anyway are not just asoftware catalog but a software graphthat tells you how all of our softwareis interconnected with eachother um and our goal is really to makedevelopers able to grasp and understandthe software ecosystem at Spotify so notonly the stuff that you work on but thestuff that's in a whole other part of ofthe company you should be able to go andread documentation understand theservices um so the software graph is abig deal as well as uh softwaretemplates for spinning up new things wehave search integration acrosseverything because you need to be ableto quickly findthings um and Tech dos you mentioned isour solution for technicaldocumentation that stays uh up to date alittle more naturally than riding anoften some disconnected Wikisomewhere yep I think for us as well itis the same so it's kind of a commonpattern to have self-service uhtemplates and the interface that weprovide to our developers so for us aswell our interface is mostly uh basedupon the um terraform modules so wecreated a terraform modules on top ofthe terraform um uh Native resourcesthat we can create with terraform sothat's a interface we provide just asmall template variable file which isexale based uh TF file to our developersand they can just quickly set the thevariables and once they set the variablebehind the scene entire terraform codeis generated for creating or generate umconfiguring the uh Cloud resources forthem so that's about the gcp part uh forthe kubernetes part uh we have uh fullymigrated to having Q language basedabstraction so we don't uh let userswrite yamal anymore so Q language helpsus to do um Dynamic validation for ylsand they can easily set certainvariables and behind the scene uh theentire kubernetes files will begenerated for them um yeah so for us thetopmost um uh that we are proud of isthe U um self-serving templates and theinterface that we provide to our uhusersyep yeah same for us it's the theautomation aspect that you can bring toit so when you have an applicationdeployed you know that in everyenvironment it's going to be the theexact same bringing that item potency tothe sdlc um as part of that our core andbest product offering that we're reallyproud of within our team is um theaspect that the developers don't have toworry about the infrastructure when theydeploy an application they give us amanifest file that says I need publicIngress to it I need a database I need acach whatever that looks like they cangive us all those details in theManifest file when that's put in throughthe pipeline it's all automaticallycreated so they don't have to worryabout the user provisioning to go talkto the database or any of that it's allautoma automatically built for them umas part of that uh another number two Iguess for us would be around ourdocumentation as we talked about umwe're we're big on write it in one spotum and then have it consumable for theworld so uh we try to track all of ourgit repos where that's our source ofTruth for documentation and then we usetools like Mark to push it up into uhwhere our document store is so we canactually have that all git based all ofour version history right there and thenwe have our automation tools to actuallypublish that out so people can consumethat but they don't have to worry aboutgoing and updating it in 12 differentspots or you know oh this documentationis now out of date because it's sittingright next to thecode you know each of you has brought upgke a couple of times and kind ofbuilding platforms on top of thatextracting I'm curious if for each ofyou what have been some some challengesor I guess how do you pick the rightlevels of abstraction so for example gkehas clusters name spaces pods these maybe familiar to some of us in theaudience here what do you uh expose appdevelopers to how do you decide and haveyou have you had to kind of change yourApproach at any point withgke I'll go ahead and take this onefirst Evan because you've been goingfirst every time that's just not fairum uh yeah we we constantly strugglewith that with our teams um it's talkingto your developers talking to yourclients because that's really who ourcustomers are so working with them onwhat they want to be um what they wantto care about and do and what they don'twant to so it's really that line thatyou have to constantly talk and that'spart of the colle collaboration aspectof here's what we implementing becausethat's what we think you might want solet's work on that and see if that'sreally working for you and What needs tochange with that so we're constantlyhaving those feedback loops with themand changing our approach with itdepending on what's good for thedevelopment team at the time and whatthey no longer care about because whatthey cared about two years ago theydon't necessarily care about it anymoreso we'll go ahead and create thoseabstraction layers on top of that asmuch as they wantneed I'd say uh our Cloud Model uh upuntil recent ly has been what I'd callad hoc and we have over a thousand gcpprojects um and teams can spin up theirown GK today so I could tell you our binpacking does not look good across theEnterprise right so I think the theshift we're taking with platform ismoving to basically name space as aservice so the self-service is toreceive a name space we call a tenantand then we wrap everything around uhthat that's needed for for the developerand so one of the change hard things isabstracting away the project view rightso we're going to have a cluster that'sgoing to be multi-tenant but we don'tnecessarily want our developers to beable to see everything that's in theproject so we've had to build kind ofour own context around once you own atenant um we then have to track all theassets uh through tagging ass associatedwith that tenant I know there's teamsinside of Google working working on uhmaking a solution for that avail ablebut that's one of the biggest challengesone abstracting away from the projectwhich is too much information for adeveloper uh in most cases um to to justto deploy an app um and then reallyfocusing on the name space tenant in GKas opposed to handing out clusters withone app per you know per cluster in theworst case scenarioyeah yeah I definitely Echo both ofthose things we have one team at Spotifythat manages is all of our clustersthey're multi-tenant clusters and likeDave said you know what does developerneed to know we've kind of abstractedmost of that away we don't want all ofour developers to be experts atkubernetes that's just not a good use oftheir time so we have Central teams thatmanage those and make it easy for teamsto deploy to kubernetes without havingto know where the Clusters are exactlywhat they want they just say I want tobe in these regions you know send itaway yep I think it is same for us aswell so we have a dedicated team uhdeveloper experience team who looksafter the abstraction layer of ourplatform uh theycontinuously uh do the user surveys andinterviews to understand what are ourusers requirements um when we startedwith our platform we also had the samequestion like what to abstract what notto and um uh the basic what we U did isuh we created a basic abstract sectionfor our platform and um uh for rest ofthe customizations or the customerrequirements that we used to get fromusers uh we used to allow lowlevel umconfiguration and customization to ourdevelopers um then uh over the period uhwe started to review what are the commonum uh practices or what are the commonrequirements that we have from users andstart to basically uh create abstractionon top of that and then basically helpthem to migrate to this new abstractionso over the period we realiz we haverealized that uh platform engineeringfor us is started to be migrationengineering uh so we have to like do themigrations a lot uh while keeping U theabstraction in our mind and basically umum having indicators for developerproductivity and developer experience soas much as possible how we can speed upand accelerate uh the process for ourdevelopers so keeping that particular uhin mind we started to do these a surveycreate obstructions do the migration sothat's how we do and I I'll add to thatit's a slippery slope um whenever youstart abstracting too much uh thenpeople are like well I don't have anyvisibility anything how do I know what'sgoing on in those types of things sowhen we do those types of things we tryto make sure that the way our pipelinesrun what the developers can see they canrun locally on their own machine too sothere's a lot of value in creating likeyour own C tool for instance that youcan actually hook all your integrationpoints into um that also allows quickand easy technology exit ramps uh whereyour developers can go in and grab theCLI tool they can start running it exactsame commands and get that feedbackdirectly on their machine but also ifyou have a new technology you'reintroducing or you're changing out oranything you do that in the CLI tool andall the developers are getting thatimmediately and they can have thosefaster feedback loops and kind of dig ina little further so it's it's definitelythat slippery slope because there's somedevelopers that they want it all theywant to be the masters of kubernetesthen you have others that are like whoaI I write Java and that's all I want todo and so it's really that talking toyour customers identifying what theywant great points I guess didn't youbring up a really interesting pointabout sort of heterogeneousinfrastructure you know in some cases itmight be all gke all the time in somecases you know you might have a bunch ofLegacy infrastructure and bringing upthe dev keynote from earlier I guesslike in the audience here like raiseyour hand if you're kind of dealing withmultiple types of infrastructureunderlying so maybe a mixture ofGreenfield Brownfield Legacy new yeah alot of us and the pain the pain can bereal um I'm curious for all of you youknow when it comes to dealing withdifferent types of infrastructure maybedealing with many gcp and other Cloudproducts at a time what have been somelearnings that you that you've had ormaybe some some things that you did thatmaybe if you went back you would youwould change in kind of yourimplementation it's a kind of a loadedquestion so yeah you want to take thatfirst sure I can go after that one um sosptify is mostly on gcpuh but we've acquired some companiesthat use AWS so now we're in amulticloud situation like many people umand this the thing we've tried to do isto uh abstract that a little bit andwe've been able to use our developerportal to do that you know so if yourbuild runs on AWS or gcp it still looksthe same and if you move from one teamto another you have the same interfacethat you're used to looking at now thatrequires a little bit of investment inyour platform team kind of creatingthese tools and these abstractions andlike Dave says there's always uhdevelopers who want the nuts and boltsso you have to kind of tow that line alittle bit make it easy but stillpossible to do powerful things if youwant to um yeah that's a little bit ofananswer so we we have many manycollections of different tools Stacks uhand so Ithink the looking at the future it's howdo you build something people want tocome to and solves problems and easy tocome to right and we spend a lot of timefiguring out how can we do things fordevelopers there is the trade-off thenthat they don't understand necessarilywhat they're getting so we have toprovide a good orientation um on theother side of it but I think it's reallyabout building something they can cometo and and move to as AO trying toretrofit or fix everything that's Legacyis not possible and there's not enoughtime in the day soyeah yeah I think abstraction or theinterface actually really plays a keyrole here so if you have an abstractionbehind the scene what technology or whatvendor you use uh hardly mattersactually but of course you have to havethat much reach abstraction on top of itand of course the vendors that you'regoing to choose need to have the samecapabilities behind the scene forexample Autos scaling or automatedResource Management so if the differentvendor you are choosing does not havethat kind of capabilities you're goingto have to basically change thatabstraction or do some hacking overthere yeah I mean hide and sight's 2020um you're going to do things you'regoing to fail with it you wish oh man Iwish we wouldn't have spent so much timeon that or something like that um theway we approach that we have terrifterrific leadership that they alwayspush the art of the possible for uswhat's actually possible for us to doand innovate and those types of thingswhich allows us to not be afraid to makedecisions and go down a path um as longas we're sticking to our guidingprinciples uh we were very heavy ontechnology exit ramps so even thoughtimes that we've made a decision of heywe're going to go do this we're going toimplement it this way and it didn't turnout how we wanted it to we're able toexit off that technology in a prettyseamless manner without our developersbeing impacted um it's just ourengineering team from the platform sidethat actually even knows about it atthat point um so I really wouldn't takeany of that away or redo any of itbecause those are all learningopportunities for every person on ourteam and in the company so um I I findValue in those failed attempts at thingsjust as much as the successful ones so Iwouldn't take away any of them gotaawesome I guess Evan you you bring upsomething uh that I think is quiteimportant which is you know you canbuild a portal but the developers mightnot come or you can enforce it but thenyou might have devs who you know go offand and build their own how do youmeasure the success of your platforminternally so do you have metrics thatthat you're looking to to move what'swhat's the needle you're trying tochange um have you solicit feedback I'mreally curious about that yeah in firstI'll say and you mentioned leadership wehave incredibly supportive leadershipand it hasn't always been the case it'sbeen an evolution getting to this pointwe wouldn't be able to do what we'redoing if it was just me screaming intothe wind every day it wouldn't work sowe do have very supportive uh uhleadership um across the board on thatum Iyeah yeah see at Spotify we have kind ofthis famous culture of autonomy and wecouldn't as a platform organizationdictate like this is what you're goingto use it just wouldn't have worked sowhat we had to do was to involve all theteams you know basically to umdistribute the ownership of ourplatforms and treat them as products asDave said you know our developers areour customers and we need to make themhappy so it's not just a matter of likehaving this Monopoly and having acaptive audience because they're forcedto use your stuff it's more like youneed to build it in a good way you needto make sure developers are happy thatyou're solving their problems so we do alot of um qualitative surveys so wesurvey our developers quarterly ask themabout all the tools that they use tomake sure that we're meeting theirneeds um and we also look atquantitative measures you know likepushes to production or number ofincidents things like that to make surethat we're heading in the rightdirectionyeah um at marari actually honestly weare not doing good work around this umuh we U measure some quantitativemetrics the famous Dora metricsbasically so like uh lead time or thechange failure rates or the dedeployment frequency availability uh SLOmetrics basically and um on the otherhand uh as uh he said uh qualitativemetrics for example satisfaction of ofour users um then we try to get thatwith uh user feedback and interviewsbasically but it's up to uh thedevelopers or uh the people you aretalking to basically you you're notgoing to get the same feedback or thehonest feedback all the time so it'sreally hard to basically get honestfeedbacks around that part so uh that'sjust about U the qualitative uh likeuser satisfaction uh but we really wantto uh solve or improve the developerexperience and productivity uh from thatperspective platform is one of the uh uharea that we are providing where wewould be able to increase theirproductivity other parts are basicallyuh their cognitive load on ourdevelopers uh and the Flow Statebasically they have to do contactswitching for different kinds of thingsso these are the different uh metricsthat we can use for umuh increasing the developer productivitybut for the qualitative metricsbasically we are not doing good job butfor the quantitative T metrics uh wehave those yeah we make use ofthose yeah we we use our patrolman a lotuh for things like that that unplannedwork aspect because what that ha whathappens with that is it's no longer DMSum to somebody or a oneoff email oranything like that we actually get themin our Channel all the time that arepublicly visible to everybody so we canpull our metrics on how are we doingfrom this perspective how many requestswe're getting and things like that andwhere our unplanned work is coming fromum all of our developers are in ourstand-ups we're in their stand-ups thosefeedback loops are as about as tight asthey can possibly be so we're gettingfeedback daily from that um but from aplatform side we we and really an entiredigital development side is we look atthe DOR metrics that's something thatwe've been trying to look at more thisyear um if you guys haven't had a chancego down to the booth dor metrics talk toNathan Harvey he's wonderful they got alot of great stuff that they're workingon there um and that's how we that's howwe really look at it is what is our whatis our time to release a change whatdoes that look like how are we speedingup or getting better and those of thingsand really grading ourselves prettyharshly on the the quality of softwarewe're delivering the quality of platformwe're delivering and where our troublepoints are so so having something likeDora metrics to be able to help createthat bench line Force has been hugelyhelpful awesome thanks so much for thatall right I've got one more questionhere let's look ahead to the Future alittle bit so you know platformengineering you know take it what youwill it's a it's not like it's buildingof a platform is new but we'redefinitely in what feels like a bit of ahype cycle with this topic looking aheadin the next year in your organizationyou know what are some uh someinitiatives or some some things that youwould like to improve or change aboutyour platform Andor where do you see theecosystem headed so kind of uh morebroadly and I going back to metricsfirst uh we do my biggest one right nowis we've got 3,800 apps on PCF we needto move off now whether they move to thenewplatform uh isn't a requirement but theyneed to move off of it so 3,800 to zerois is the biggest metric I work off butwe do we've got a full-time productmanager uh net promoter scores cause wewe we do surveys as well so I meanreally getting the feedback is importantthe future really what we're launchingnow is our future so we're very much uhcontinuing the journey building amanaged application platform thatabstracts everything away is prettyambitious um and uh so I I think the youknow with tools like backstage and someof the other helpers out there uh todayuh there's a lot of you know lot ofpossibilities on the front end portalside um uh but really figuring out howto get those abstraction layers rightand uh uh making sure the developer hasa good experience um is going to be thecontinuedFocus yeah it's a um we have two atSpotify um one is called defrag like theold windows tool you know basicallytrying to reduce software fragmentationat Spotify because we have too manyTechnologies and that doesn't allow usto build an effective platform you knowso that's one effort and at the sametime we're expanding the tools that weuse so we have ai ml you know these newareas that we're investing in thatthemselves need a platform becausethey're still still new andmaturing so we've developed like asophisticated ml platform we're lookingat different types of platforms that weneed to expand to and we're looking athow AI can actually help the platformitself you know like summarizing codereviews or um providing suggestions forusers of our portal that sort ofthing yeah I think it is pretty muchsame for us as well so uh for mercari uhwe we really want our platform to be uhuh a way to increase developersproductivity and um uh we are basicallyheading over how we can increasedevelopers productivity and inreach orreach uh developer experience soplatform is one of the way but um uh ontop of that we will be creating um uhthe abstractions so that they're goingto have to uh make less changes or justset some of the variables or make use ofdeveloper portal basically so that thatpart basically we will be putting a lotof efforts on so that we can increasethe developerproductivity and uh maybe one of the uhideal state that we we are lookingforward is to having a platform as aservice which is going to be theinternal uh but we are not yet surethat's going to be the solution for usbecause of course that also has Downssites kind of instruction we can have orthe customizations we can have so thatactually has problems platform as aservice but if you um do the uh usersurveys or understand your users reallywell you can have uh the requiredabstractions and have platformaccessories for your internal users sothat's where we are heading man we madeit like 37 minutes without saying AIthat's got to be a new record for thesebreakout sessions we all needed a bit ofa break sorry guysno I think I think that's a veryappropriate uh piece of where I seeplatform engineering going is is what dothis this AI look like in the new worldwith platforms um platform engineeringis already a new enough terminology thatnot everybody's doing um and so that'sjust going to put another spin on it ofof what those look like going forwardand what those teams and um structureneeds to look like if your developersaren't uh having to write as much codeum and those types of things and reallyhow that's going to implement there umfor us internally really see that nextevolution is just the continuing of uhpromoting what platform engineering isas everybody knows here when you try tomake changes like that the culture isalways the hardest part to try to changeI'm and go through so it's really justcontinuing to talk about what it is andwhat it's doing and setting up thatcommunity of practice better we have aterrific data platform team that they dosome pretty amazing stuff on that andit's coming together with that CommunityPractice and identifying how we can getthose synergies between each other andfiguring out how we can build on whatthey've done and and vice versa andeverything that's really where I see umit going internally here inWendy's gotcha right thank you all so somuch um right so we're running out oftime here I just want to give a hugeround of applause to our four panelistsforing thank you thank you thank[Applause]you and uh I just want to you know shoutout you know I think this is a nentspace there's tons of interestingconversations to be had for sure um ifyou scan this code um QR code there is arecent blog post you know from gcpcovering some ideas around platformengineering I would encourage you if youhaven't checked out the what's new incicd talk you know it's but a piece ofthe platform engineering story but it'sa really great talk and um there's athere's a repeat of that tomorrow um ifyou have questions um you know we'll tryto you know hang off to the side here umwant to thank you all so much for yourtime please enjoy the rest of your Cloudnext thank[Applause]you"
}
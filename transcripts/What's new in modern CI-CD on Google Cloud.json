{
    "title": "What's new in modern CI/CD on Google Cloud",
    "presentation_type": "Breakout",
    "categories": [
        "DevOps, IT Ops, Platform Engineers, SREs",
        "OPS200"
    ],
    "video_id": "ZLI8sknDNWw",
    "time": "Aug 29 06:00 PM - 06:45 PM CDT",
    "transcript": "foreign[Music]hello everybodyum thank you so much for coming this isOps 200 if that's where you wanted to beyou're in the right placeum this talk is called what's new inmodern CI CD there are a lot of slideshere and a lot of text and I encourageyou to take pictures if that's easierfor you you don't have to readeverything don't stress out if youdidn't get through everything before Icontinue onum all right so let's start thisshowall right so um I'm Mia Villasenor I'man engineer at Google I work on devopsand CI CD products and I'm reallyexcited to be with you uh today andum my colleague Nick Avery is here he'sa product manager at Google in thisspace and he'll be covering the latestfrom us later in the presentation andI'll let him introduce himself thenall right so here's an overview of thistalkum we're going to go through the basicsof cicd why this new stuff is better andan overview of the renewed focus onsoftware supply chain security whicheveryone's talking about including theWhite Houseum we're also going to talk about thelatest from Google in this space becauseit wouldn't be Cloud next if we didn'tinclude that part soall right sojust to level set everybody what is CICDI like to talk about it like this it'sthe combined practices of continuousintegrationand then either continuous delivery orcontinuous deployment we'll talk aboutwhat those mean in a second butthat's what the acronym stands forand for those programmers in theaudience the pseudo code might make alittle more sense to youso let's break that down rightcontinuous integration is the first stepof any pipeline right it's the practiceof frequently pushing all changes to amain branch in Source control and thenrunning automated builds unit tests andintegration tests off of those buildsthe next stage is continuous deliverythis is where that built and tested codefrom the previous step is continuallydelivered to a production likeenvironment also called stagingum you can increase the confidence thatyour deploy is actually good when youuse a system like thatand then finally there's continuousdeployment and this includes all of theprevious steps but adds one crucialadditional step which is an automaticdeployed to production if all of thattesting looks goodI should note that we only see thisusually with very mature devopsorganizations because you need to havehigh confidence that a green light fromyour pipeline means you're actually goodto go to prod and oftentimes that's notthe caseso in practice what does this actuallylook like rightit all starts with the local developmentenvironment that first line of codeand then that developer pushes that codeto Source control like Get Rightand then we hit the Ci or the continuousintegration and that's where thebuilding and the testing happensand then you have either continuousdelivery or continuous deploymentdepending on what you're feelingcomfortable withand it doesn't stop there there's oftensmoke testing after prod deploy and thensomeum security controls wait wait wait asecond security controls that's the laststep hold on hold on hold on I don'tthink that's right I think we actuallyneed to um shift left right yes it's abit of a buzzword and that's superannoyingbut they actually have a pointif you take care of all of your Securityreviews before you get too far down thatdelivery pipeline you're going to have amuch much better timebecause imagine if you depend entirelyon a third-party library that is laterdeemed completely unacceptable I meanyou'd have to start all over right likewhat a waste of timeso modernization right like soundingpretty good right now rightso I want to tell you a personal storyabout why this is so importantsoone time I took down prodbecause I did an imp deploymentincorrectly and this wasn't at Googleit was still scaryand this wasn't just one service thiswas everything globallyfor five minutesscariest five minutes of my life ifyou're an SRE you know this painso you might be wondering how that waseven possible Rightit all boils down to the fact that thedeploy was a manual process and thatrequired editing some text files and ifthe deployment before didn't gocorrectly and it wasn't cleaned upproperly then the next one would runinto trouble if you didn't check theconfigsif you've seen something like thisyou're very familiarwe had a checklist of how to deploy butthat wasn't sufficient to fix a problemthat was outside the bounds of achecklist rightso this is why we do this automation foryour pipeline repeatable buildsinfrastructure as code right it allcontributes to a more stable softwaredelivery life cycle and stability meanshappier engineersbetter security and of course happyAuditors which is a nice thingit's also clear from data that has beencollected as part of the devops researchand assessment surveys that continuousdelivery performance actually predictssoftware delivery performance which alsopredicts organizational performance andthis is in like real ways that you canmeasure like market share and engineerburnoutand if you've ever submitted code to apipeline that takes forever only to findoutI don't know seven hours later that yourcode didn't even work right youunderstand this painknowing when something is broken sooneris always better for engineeringhappiness and efficiencythe other thing I'd like to mention isthat high CI performance shines evenbrighter when it's combined with bettersecurity and teams that follow safepractices and have a well-developed CIwere found to be above average in termsof organizational performanceif you enjoyed this mix oforganizational psychology and Tech Ihighly encourage you to check outdora.dev it provides a wealth ofinformation that helps teams get on theright trackand there's a little QR code here ifanyone wants to take a picture of thatthese slides will also be availablelater so no stress all right so let'stake a step back real quick and look atsome other challenges in traditional CICD elasticityportability and maintenancelet's take a step back right there'ssome challenges with traditional CI CDright elasticity is usually the primaryconcern not elastic infrastructure isbad for performance and cost efficiencyright I want to zoom in on this graphbecause I love itduring Peak if you have a staticinfrastructure set up like a bunch ofbuild nodes that are always the sameyou're not getting the performance youwant when everyone's trying to checktheir stuff in and check itand then you're also paying for idlemachines off peak right just doesn'treally make senseand then there's the portability problemright if you depend on plugins that arespecific to your tool and then you needto move platforms you're locked in rightand then there's maintenance patchesrepairs that's all on youso how does Modern CI CD address thesethings well it starts with portabilityright with containers you run your stuffon any Cloud any CI CD system right andif you depend on your CI CD systemsplugins that makes migration prettydifficult so we try to avoid that if wecan and containers are a great way tojust bring your house with you rightand then two elasticity right only payfor what you use and get what you needat Peak with a managed serviceand then in addition to the elasticitybenefits of a managed service you alsoget ephemeral environments that avoidthe headache of patching maintenance andmaking sure that your environments aresecured from one anotherall rightso I promised I'd talk about thisbecause this is a super hot topicum supply chain security vulnerabilitiesthese are nastythere are some challenges here rightbecause when we're talking aboutsoftware supply chain security we haveto think about the entire Spectrumeverything from that first line of codemaking sure that developer locally isauthenticated to day two when thatworkload is in production rightand when we look across the entireSpectrum the number of attack factorsthat can be used to compromise oursupply chain is crazyand traditionally the far right side ofthe spectrum is where we spend most ofour time and focus and we do a prettygood job of it now in off things likethat right howeverthis is where we're starting to see aproblemlocal Dev dependency injection issuesso there are four key challenges herefirst nobody writes everything fromscratch most people pull from commonopen source Frameworks and libraries andthe majority of those projects don'trequire signed commits two-person codereviews right that doesn't mean opensource is bad I love open source it justmeans you have to be carefuland I'm be the first to tell you thatincreased cicd automation is a greatthing but that also means an increasednumber of deployments which meansincreased riskrightsecurity has not been top of mind formany CI CD systems for years many ofthem run with root it's just easier oh Idon't know what the problem is just giveit rootand then with the increased adoption ofcontainers you have this proliferationof outdated base images becausesometimes your base image is so far upthat chain that you don't even rememberhow to update it anymore rightso the sheer number of possible attackfactors here and the dynamic nature ofCI CD makes this makes this hard toprotect because the security of theentire supply chain is only as good asits weakest linkthe good news is that this space isgetting a ton of attention regulatorybodies are getting involved and there'sa number of emerging standards as wellall right so let's go over a fewConcepts on how we're addressing thisso the three fundamental ones areprovenancewhere and how it was createdtransparencywhat's inside that artifactand then finally impact are we actuallyeffective do we need to care about thisright so let's go through each of theseand see how we can actually use these toimprove our supply chain and not justtalk about buzzwordsall right so talking about Providencefirstso there's This Acronym we came up withcalled Salsa which is really funnybecause we have another one called guacright so we just like have this themegoing with like foodanyway it stands for supply chain forsoftware artifacts and it's a frameworkunder the open ssf its creation was ledby Google and in many ways itexternalizes an internal framework thatwe've had for years for Borg called babbinary authorization for Borgthink of it as a checklist of standardsand controls to prevent tamperingimprove integrity and secure packagesand infrastructureit's all about getting from where youare today to that next level of softwaresupply chain security and not jump intosomething crazythe salsa guidelines are a really greatway to do this because they're dividedinto several levels for incrementaladoption level zero is basically whereeveryone starts no provenance at alllevel one can be achieved by justdocumenting your automated build processwith provenance so that it's clear howyour artifacts were builtlevel two requires your CI CD system togenerate and sign that provenance itselfand this is most easily done with thehosted build platform but you cantechnically do it anywhereand then level three Builds oneverything else by adding strongisolation between nodes they reallyshouldn't be influencing each otherand the secrets that are used to signthat provenance should not be availableto the build itself think about theproblems that could causeso why does this matter right like thisisn't just a compliance thing that wehave to think aboutwe want to use this data Downstream toactually do things right if the buildersare creating provenance stocks then wecan make decisions Downstream on whethersomething should run right binaryauthorization if you've heard of that wecan use this data to make decisions atthat pointand of course you know I shouldn'tmention we do support the highest levelof salsa as a V1 in our products as wellso check those outall right so transparency is next sosalsa was all about the provenance ofour buildsbomb or software bill of materials isabout the content of those artifactsso you can think of it as like aningredient list on a can of soda rightin addition to listing what's insidethat artifact s-bomb also includesinformation about the provider of thatartifact and how different artifactsrelate to one anotherand yes we support it in our products aswellall right so what is the actual impactof these software supply chainvulnerabilities right like we've coveredprovenance with salsa and artifacttransparency with s-bomb right but ifyou're doing anything with even a smallamount of complexity and scale you'regonna have vulnerabilities right andthat's often super overwhelming becauseyou're in this fire drill trying topatch millions of endpoints before yourSLA for patching is over rightand that's where Vex comes inVex stands for vulnerabilityexploitability exchange and it's anadditional standard that brings contextto this whole situation basically ifthere are vulnerabilities in thesoftware depending on the call graphthey might not even be reachable orexploitable so what's the point inpatching them rightand it does this with what's calledimpact statements avec's impactstatement provides a way for us toindicate that a specific vulnerabilityis not impacting the specificapplication because of X it gives areasonyou don't just have to believe it righta good example of this is avulnerability that is specific to aruntime like wassum for example if yourapp is distributed as a container imageon gke it's probably not exploitableso our approach to supply chain Securityon Google cloud is twofold onewe want to integrate these time testedpractices based on Open Standards and input them in our products bake them andmake it easy to useand we're focused on the open sourceCommunity as well and we provideleadership around things like standardssalsa technology osv scanner fuzzingshared open sourceand we integrate software supply chainsecurity at every step in our pipelinesright all of these products worktogether and secure your software supplychain because it's only as strong asthat weakest linkwe look at the space in four partsthe first is the local developerexperience I think a lot of peopleforget about that but it's actuallysuper important rightsecure access to Source control is adifficult problem to solve right verifyan identityscan you for vulnerabilities andlicensing information at the time thatthat information is introduced into yoursystemtwo the supply of artifacts needs to bescanned and verified to be clean and youcan do this yourself with our artifactanalysis offering or there's assuredopen source as well which does a lot ofthat work for youand then cicd is where the salsa s bombVex stuff comes into play you want tomake sure that you're generating signedartifacts with proper metadataand then finally at runtime we want tomake sure that deploy systems areincorporating admission controls thatuse that metadata we talked aboutearlierto actually make decisions on whethersomething should runand then all of these areas areunderpinned by a unified set of policycontrolsall right so let's dive a little bitdeeper into some of these that are myfavoriteso managed local Dev right this issomething that I think the industry as awhole needs to think a little bit moreabout our solution to secure local Devis this thing called Cloud workstationswhich provides cloud-based Devenvironments for existing gcp customersthis is an extension of the cloud shellthat you know and love but we supportrunning those workstations on your ownVMS in your VPC instead of using ourresourcesand this benefits two types of people Ithink this is really great for a centraldevops team that can automate managementand security policies for their team'sDev environments like with workstationtemplatesand then also developers have anon-demand pre-configured workstationright the the days of oh it works on mymachine are gone because everyone hasthe same machine rightso continuing with that local Dev Storythere's this thing Cloud code Sourceprotect which brings dependencyvulnerability and license awarenessdirectly into the IDE without blockingproductivityand this all seamlessly works with Cloudworkstations because it's just a VMrightwith these two things together yourcentral devops teams and developers cansecurely manage developer environmentsand create secure applicationsthis is currently in private preview butif you talk to your account rep I'm surethey can set you up with somethingall right solet's learn about the latest from Googleand I have Nate here to walk you throughthat thanks so much[Applause]okay so uh I know some of you flew inlast night maybe you flew in thismorningand it's been a long dayand I am the only thing standing betweenall of you and happy hourgreatso I'm going to let you in a littlesecretwe have release notes with a lot of thestuff in itso if you happen to feel parchedyou can go to the docs but uh if youwant to hear about why some of thesefeatures are like really cool and why wethink that they're compelling and whywe believe that they're going to enhanceyour experience then please stick aroundI'll try to make it go quick thoughall right everything starts off with thebasic CI CD pipeline it reads from leftto right you have your IDE in this casethat's going to be Cloud Workstationpaired with Cloud code we have a sourcecode repository we have build handled byCloud buildwe have artifact analysis and artifactregistry for your package handling needsas well as your security vulnerabilityscanning and then Cloud deploy is adedicated tool built for deployment andthen we have our run times so that's gkeCloud run all those really cool modernones where we can do things like thebinary authorizationso let's talk about Cloud buildas you can see there's a lot herethis isn'tquite everything that it does but thesewere a lot of features that werereleased over the last year or soand before we talk about some of thespecificsum well let's just handle some of thebasics about call buildCloud build is our CI solutionand it's meant for Automation and it isunopinionated and by that we mean youcan set up your tasks any way you wantto find by usevery one of the build steps as anephemeral container and those containersshare a common workspace which allowsyou to actually pass information acrossfrom one to the otherso earlier Mia told you about salsa andshe told you that cloud build handlessalsasowe're going to move onI told you I'm gonna try to make thisworkso binary authorization binaryauthorization is pretty cool and I knowa lot of folks and are talking with themthey don't always turn it on and some ofthat is because there's like a fearmaybe it works maybe it doesn'tbut let's try to remove that fear bytalking about it a little bit more andhelping you understand what's happeningit worksyou can think of it as a series oftrust-based policies right you sayI want this to be the thing that blocksa container from runningand that thing can be describedin a couple of different ways usuallyit's going to be defined using all ofthe stuff we told you about before likesalsa s-bombs vexall of that so you could say yeah I wantto stopanything that has a security rating ofhigh or greateryou could also sayI only want to run things that werebuilt in Cloud build right so you havethe opportunity to make that workhowever you want and if you take a lookat the binary authorizationconfiguration page you can also run itin a dry run mode where you can justkind of take a look at it see what wouldhave happened had you had it running andthose results will be in the logsokayso again the the big six of it is thatif something shouldn't be running thenit'll stop itand that's really the whole idea of thisyou want to make sure that the thingthat you've developedis secure over hereas it's built it maintains its integrityand when it's running it is still thatsame thingforeignand this is actually on your runtime gkeor Cloud runyou're going to get one of these reallycool security insights panels it'salerts what you saw beforehowever this is whenyou know content that's actively runningit'll analyze your kubernetesconfigurations against the Pod specssecurity standardswithin highlight any deviations that itfinds pretty much what's wrong with myenvironment you know am I good to gookay let's go back to some of theseother featuresumI work in productand so I can tell you that once aproduct is launchedthings happenum we learn a lot about how peoplereally use these products in the realworld and in this case uhbut Trend just started really takingover and I know all of you know it isinfrastructure as codeand what we found out was that peoplereally really wanted to use terraformto create infrastructure as codefor everything including how theirpipelines are built so that was one ofthe features we added it was a very welluhwell received feature I'll sayevery now and then we get to do somethings that you know customers reallylike and this was one of them uhwe'll move onso Cloud builds free tier this issomething that's out there you're allencouraged to try it you can get a lotas you can see you get 2 500 pre-builtminutes per month and one of the otherthings that we've doneI think I can go back real quickthe E2 standard 2 default machine typeis Now the defaultumit's a lotit's kind of redundantbut what it means is that you're goingto get a faster built machine rightand so that will actually help youin your processes get things going inyour CI CD pipeline hopefully in thingsa little bit faster from the perspectiveof your of your buildsnext we'll talk artifact but I just readan analysiswhich are there okay up topa little bit of background for those ofyou who uh may not be too familiar withthem we used to have this product calledcontainer registryand can on registry was really nice butit did what it said it stored containersand as time went on we realized thatpeople needed to store more thancontainers they need to storeapplication packages along with themmaybe they needed to store OS packagesalong with those and so now we haveartifact registry which is a universalpackage management systemit tries to cover everything and in thatit also ties into our security controlsso that CMAC vpcscauditing and vulnerability scanning thevulnerability scanning by the way comesfrom artifact analysis and that sameartifact analysis provides scanning at acouple of other layers in the systemhere's a list of a few of the featuresin ARand judging by the number of folks whosigned up for some of the pre-gafeatures uh we knew that some of thesewere going to um to land fairly well uhfor instance remote and virtualrepositoriesum cleanup policies was another oneand the other thing that happened waswhile we were releasing new formats likeyum app go you know some of the otheronesuhsome folks said well what if we havesomething that's not one of thoseso now there's also going to be ageneric type availablethat should cover hopefullya lot more the folks and really make itthat Universal tool that is intended tobeokay so we'll talk about virtual andremote repositoriesthis feature strengthens thisstrengthens sorryI'm tired a little parchedum your dependency governance andsimplifies this and simplifies access toPortsall that really what it says is going togive you like a universal URL to yourreposremote repos on the other hand point toan upstream repo sowe'll go to this guylet's say I have a simple python appthat I made upuhwhat I would do is I'll configure someof those packagesfor the ones that I've created to bestored in my standard repoI'll create a a remote repo that pullsanything that can't be foundfrom Pi Piand then I'm going to use a virtual repounderneath thatthat I point everything towardssoIn The End by using that one pointI've lowered a lot of the cognitiveoverhead of a developer they don't haveto remember all the different URLs allthe links to figure out where to getpackages but then something else reallycool happensand that'syou kind of see it over herethere's a priority tabuh priority columnyou can set the priorities such that ittellswhich one should be pulled firstso in a lot of cases what you're goingto want is to look at your local repobefore it goes out to a third party repoonce more there's a quick reminderthat we have scanning which can be runon pushwe also have scanning that can be run ondemand for a variety of package typescleanup policiesit's pretty obvious I mean it you knowwe put it right there on Front Streetit's for cleaning up files in yourregistryumit's really neat though because it doesmore than just Define policies fordeletion you can also Define which filesto keepuhyou can apply up to 10 of these policiesper repoand they're defined with Jsonpretty basic stuffthis right here is what a delete policylooks likenot a whole lot there you know if youknow Json yep that's what you expectthis is what a cleanup policy looks likeit actuallylooks pretty darn similarwhat you'll notice though is that in akeep policy the action type is a typekeepokay Cloud deploythere's one thing I want to mentionbefore I really get into Cloud deployand that's the fact that this wholesystem herethey're made up of individualapplications and any of theseapplications can be replaced with athird-party tool nowwe're not going to fight you if you wantto use all Google tools but if you havesomething that you prefer to use foryour builds if you have something thatyou prefer to use for your artifactscanning and Analysis and storage or youjust think you have a better deploymenttool that's fine it'sit's we're trying to make it so thatwill meet you where you arefeel free you can swap out Parts as yougo you don't have to do it all at oncein a big bangforeignit's an interesting product Cloud deploysome folks don't quite get it when theycome to it it can be a little bita little bit challenging becauseit is focused specifically on deploymentthat's what it does it doesn't do buildsit just does deploymentshowever it does it really really wellright it does it in an opinionated waynow opinionated here means that it hascertain best practices and policies andall that stuff kind of built into itand this is a list of all the featuresof cloud deploy that that were launchedin the last yearteam's been super busy just crank itaway and there's a lot hereumokay yeah verifications there SDSinsightsalmost everything that's hereis designed for making sure that youhave a very fluid capability to deployonto our modern runtimes like gke aswell as Cloud runand the other thing that's really neatabout this is that the team goes extrafar and that they want to make sure thatthose features that work for one of theruntimes will work for all of the runtimeswhere possibleso we talk about Canaryum I think most of you know what acanary is but real quick a canarydeployment is a progressive rollout ofan application that splits trafficessentially you have one that's alreadyrunning and then you want to have a newversion so there's some percentage oftraffic to split out to a new onewith Canary and Cloud deploy it's up toyou to set what those thresholds are youcan start with five percent ten percent25 percent whatever you want it's up toyou you figure outum whatever it whatever it takes to makeyou feel comfortableknowing that the deployment is safewe'll now talk about parallel deploythis was really coolum affects different people differentways butwhat it does is it allows you to deployto multiple clusters at the same timeso let's say you've got a cluster on theeast coast and you have a cluster on thewest coast uh you can drop the same uhdeployment onto both of themwe also have deploy parametersso this works in conjunction withparallelso if we go back to that example of eastand west maybe there's a little moretraffic running on the East Coast so Iwill set a number of nodes at eight andthere's a little bit less traffic on thewest so I will set that at sixand that's perfectly possibleyou can that's that's just one of theexamples butwhen you really start looking at thingsmost deployments get sticky at pointsand parameters can be a big helpdeploy hooksthis is another one of those featuresthat was added to address real worlddeployment needsreal quick they are user-defined actionsthat can run either beforeor after or both before and after yourdeploymentsolike how sorry uhI remember doing deployments back in theday when I needed tomaybe update a database schema before Icould run my deployment so that would bea pre-deploy hook maybe I had a customscript that I needed to run after thedeployment that would be a post deployhookwhat's really neat is that it takes alot of thosethings those tasks those chores that weused to domaybe outside of the deployment tool itbrings them back into it so that youactually have really nice automatedsystem that automates all the stuff youneed and not just parts of itoh this one herein console onboardingthis one is one of my favorite featuresbecauseumI will admit something real quick when Ifirst came to the teamI tried to launch Cloud deploy and Iwalked through it and I realized I couldnot create a pipeline using the GUIit was weird I thought it was weirdbut you know there was there wasthoughts behind it you know there's alot ofthere's a lot of thought put into all ofthe applicationsbut I kind of walked away from itthinkingI'll get back to it later and soI happen to know from talking to folksthatI wasn't the only one so if previouslyyou did what I did and said I'll checkit out lateryou now can do that it works reallysmooth it's in the GUI run through itonce get your idea for but for whatworksmaybe do a quick POC and then if youreally want to do it after that you canjump into the yaml filesand one last notewe believe in this tool so muchso much so that the price has beenadjustedumand this is really something that goesalong with an overall feature that wewant which is accessibility we wantfolks to feel like they can come tothese tools and give them a run andimprove their experienceand we realize that price is a big partof that sonow I want to make sure I say this rightso I don't get in trouble with legalum you can use pipelines with a singledeployment Target at no costsingle Target no cost but then anythingother than that if you need a more fullfully fleshed out pipeline those havebeen dramatically reduced in terms ofprice so really at this point it's areally cool product to jump into betweenthe price change and the GUI setup we'rereally doing whatever we can tomake it easier for folks to at leasttake a look at itso to wrap it upthere are a few things that happened ina modern pipelineand we all have some technical debtthat's already in therewhat we're hoping to do is to provideyou with tools that at leastreduce how much technical debt you havegoing forwardthat's really kind of the goalso if any of you are out there and youhave blockers to that or you found somethings that you don't quite like aboutthe tools that's fine most of us areavailable in social media circleswe'll be downstairs in the booth I thinkI've got both days Wednesday andThursdayuh just come by tell us tell us what youlike tell us what you don't likeum because the team takes that feedbackvery seriouslyso thank you[Music]"
}
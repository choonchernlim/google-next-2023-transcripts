{
    "title": "Build global-scale apps with cloud databases and managed runtimes",
    "presentation_type": "Breakout",
    "categories": [
        "Application Developers",
        "DEV104"
    ],
    "video_id": "dtXebXwIObU",
    "time": "Aug 30 04:15 PM - 05:00 PM CDT",
    "transcript": "foreign[Music]hello everybody and welcome to oursession uh building global scaleapplications with managed databases andCloud runtimesum I'm Harish shaikumar I lead theglobal Solutions team here at GoogleCloud today along with me I have Johnwho's our product manager from thedatabases team and then Sean as wellfrom a customer from Wayfair we did planto bring the piano and replicatesomething that you saw in the keynotetoday but unfortunately we couldn't fitit over here and so you just you're notgoing to have the three of us sayingwe're just gonna have a talk over hereand I think I just realized that it'sSean and Johnall right cool so our agenda is prettysimple here we're going to start withdefining what a modern application isthen we're going to talk about how we'regoing to build a modern applicationusing Google cloud and then we're goingto have John come our customer talkabout the story on how do you buildthese applications when using it inWayfair and then we're going to open upthe Q a after which you get to take asurvey and say how great we were so ifyou have something good to say take thesurvey otherwise come talk to us outsidewith that let's get started so let'sstart by defining what a modern app issoif I'm looking at people over here rightdepending upon who I speak to yourdefinition of what a modern applicationis going to be different if you're anend user you care about hey is itseamless does it work on all myinterfaces whether it's my phone mylaptop wherever I'm going to be using itif you're a developer you simply want tojust focus on the business logic if itworks on my laptop I want it to work intest pre-prod production and it needs tobe just work seamless out of itif you're an I.T and you care abouthey how can I get it faster toproductionhow can I make sure I have a simple CICD pipeline can I make push my codefaster make it much more agile how can Iensure I have compliance security and ifyou have a hybrid environment ormulti-cloud environment can I use myapplications over there seamlesslyacross themand then finally if you're a businessowner what you care about is hey I careabout monetization kind of launch newfeatures and can I build an ecosystemoutside of itand the nature and complexity of theseapplications have also changed forexample the most four important thingsthat I talk about if you're building anapplication today is scale reliabilityspeed and being data driven so let'stalk about scale you just started thisapplication you're two people in agarage you have one two users andtomorrow suddenly you're this nextsuccessful startup and you have amillion users you need to immediately beable to scale them and then reliabilitytoday's business is always always on sohow do I ensure I get the reliabilitysecurity and continuous availability ofthese applicationsand then speed if you want to quicklykick off a new feature probably an agilemode so that your users can immediatelyget them and then finally modernapplications are very very datasensitive so how do you store retrieveand deliver these experiences with theseapplications as wellgreat so when we're talking about thesekinds of Designing applications Cloudnative applications is far more Dynamicso today when you're starting to buildthis you're going to start building themusing a microservices architecture anyCloud native applications becausetomorrow you want to just change onefeature one part of the code you don'tneed to touch everything else amicroservice architecture enables you tojust focus only on that area and thenI'm going to run them on VMS you want topackage them and run them in a containermodel and then when you're buildingthese applications you know I'm going togo on a waterfall model take months tobuild a code but you want to make sureyou have a continuous delivery of theseapplications as well and gone are thedays of pre-provision you don't set upsomething and just wait for a server tojust like okay it's all done but youimagine when you keep these demands howdo I scale on demand that I keep gettingfrom my customersand finally you want to avoid failuresso the resiliency of these applicationis also super important so as technologyenables these attributes users are alsobeginning to expect them so the expectede-commerce application for example theJohn's going to come talk about to beintelligent and up to date withinventory and recommendationsso honestly this is not just a technicalthing this is just part of doingbusiness todayso we Define what an application is wetalked about the characteristics that'simportantlet's go build an applicationso what do you what do you need when youfirst start first you're going to pickyour choice of code I don't know you cango all the way from C plus plus Java orgo python whatever you're going to doand then you're going to take this codeand you're going to package them incontainers as microservices over here soyou see over here you have mymicroservices like a product catalogcheckout ads recommendationsthen you want to store your data sothat's a stateless application I storemy data I pick a data store database butI want to keep everything in itour package my applications running themas micro Services now I need a containerorchestration so I would choosesomething like kubernetes obviously I'velisted kubernetes over here but you'rewelcome to go use cloud run serverlessmodels as welland now you want to also connect andsecure these applications so you have aservice mesh to using outside of it andthen finally you want to make able tomanage the consumption and reuse them soyou have an API management now I knowI've oversimplified it over here there'sthings that I'm not covering like daytwo operations logging monitoring allthose pieces but you get the gist of itthat these are the major components thatmake up as you're going and starting todesign the applicationso we've defined the application webuilt the applicationnow let's go run themso we have two parts I'm going to talkabout over here first very simply on topis our managed runtime environmentsstarting with gkegke is Google kubernetes engine basedoff open source kubernetes and for thehighest scale 15 000 nodes that you cango and it can be used across multiplezones and multiple upgrades as well andyou can use that to build your developerplatform as welland second Cloud run we've got a bigshout out today in the keynote as well Italked about you could go even buildyour platform on top of gkeCloud run that's your platform that's afully managed serverless platform thatyou can get up to speed and just startrunning and start writing code ASAP andget deployed on it here's the cool partonce you've designed your applicationput it in a container format you don'tneed to decide if I'm going to put it ongke or Cloud runthe really really great part is thatonce it's in a container format andyou've standardized your applicationcontainer format you could put it on GKtoday tomorrow you may decide and youcan just move it as this and move itinto Cloud run that's the cool part overhere and that's in fact I wouldrecommend if you're starting somethingtoday you don't want to manage yourinfrastructure at all no Ops at all youwould start with something like Cloudrun whereas if you've been invested inthe kubernetes ecosystem and you loveyaml and you've always written yaml andyou've put your entire ecosystem aroundit you would use something like gke andthen we also have a feature in gkecalled GK autopilot that not onlymanages your control plane but also yourdata plane as welland similarly coming down to thedatabases side if you see over here onthe leftmost we have Cloud SQL which isa fully managed relational databaseservice for SQL Server MySQL andpostgresqland on the rightmost side you have aspanner that's a Ferrari right it'sGoogle battle tested Mission criticaldatabase that provides unlimited scaleso spanner was actually built for ourown workload so we built this back in2017 to run the Google's ad business andif you saw it today in the keynote theyalso talked about how they migratedentire so Gmail now also runs on cloudspamand then in between is alloy DB it's ourmost recent offering I think it's abouta year and it sits between it brings youthe best of both Cloud SQL as well asspanner it's our newest postgres SQLcompatible relational database withbroad postgres SQL extension supportsowe have the applications we built it wehave our cloud runtimes and we have amanaged databases so these are all theLego blocks let's put them togetherto build three different types ofapplicationNote 3 apps sorry no no two applicationsare the same type so we're going tobuild three separate types of apppatterns you're going to see todaystarting with internal corporateapplications then we'll move to howwould a mission critical applicationlook like and then finally we'll stopwith an elastic applications as wellso let's take the first patterninternal application right so let's picksomething like a corporate HRapplication so now you know it's aninternal application so it's going to beinside your corporate VPN for securityyou know anybody about too much about itand then this next what are the nextcharacteristics business critical versusMission critical so what's thedifference right Mission critical is heyif this application goes down for evenlike one microsecond or millisecond I'mlosing like billions of dollars on itinternal application is more businessclinical it's not Mission critical yeahit's going to be a little bit of anaudience but you can still get get alongwith it it's not as cost sensitive youdon't need to worry too much about likeI need to have the latest bells andwhistles associated with it and the SLAmay vary depending upon you know youcould have multiple internalapplications so what is your essaywhether it's going to be your paymentinternal application or was it an HRdatabaseand then finally you want to make sureyou don't have less to no Ops around I Ijust want to just simply have theapplication to go I don't want to managemy infrastructure at all and then we'lltalk about what build taxes which is areally cool feature that I like on thisso if these are the characteristics Itake the Lego blocks that I talked abouthow would I build such an architectureso I would take the application becauseinternal apps don't receive high volumesof traffic they could benefit using acombination of cloud run and Cloud SQLso I have my application packaged incontainers run them in Cloud run andthen I would have Cloud SQL as mymanaged database behind it and thenbecause this is going to be an internalI would put them inside a virtualprivate cloudand I would have an IAP or enter or anidentity aware proxy that canauthenticate the users now this is coolright the IAP is what we use insidecalled Beyond Cod we don't use VPNinside Google right all ourauthentication everything happensthrough Beyond Corp that's thetechnology getting using IAP when youwhen you're able to authenticate it sonow your entireyou know private VPC contains theseinternal resources and users and has astrict security boundary enforced at thenetwork level as well now I know this isagain oversimplification about it butyou can see how clean and easily you cando that for an internal architecturenow let's talk about two customers whoare actually using it let's start withsap so I told you I'll talk about uhbuild packs so sap is actually usingCloud run they're using our source-baseddeployment approach what does that meanwhat it means is now you built anapplication you don't need to worryabout taking a Docker file writing aDocker file packaging in containers allthat stuff Bill packs does it for you soyou can see the actual code over herethe build packs automatically detectsthe language from the source code so ittakes from the source code packages itand then you can actually run itstraight out of the box so it's buildship run right out of the box and notonly that inside Google a big part ofhard corporate or internal applicationsare running on gke as welland here's an external customer careportso what they are using is they arebasically a retail customer and they'reusing both gke and Cloud then and theywanted to provide a more reliable andhigh available service to the customersso they are using Cloud run fordevelopment of their e-commerce platformthey're using gke for their mobileapplication and both of them in the backend they're using Cloud SQL so nowthey've built this new system and withthis system they're able to do about 6Xfaster operating speed and they haveabout average about 40 percent onoperational costs and eliminate downtimeas wellso that'sthe end of pattern number one next I'dlike to call Sean to continue withpattern two Mission criticalapplicationsshophey everyone my name is Sean I'm aproduct manager at Google Cloud fordatabases happy to be here today umthanks you for coming to the session inthis afternoon I will go deeper into thesecond and third app patterns some ofthe more Heavy Hitters if you will thesecond app that I want to talk abouttoday is about Mission critical apps andthese applications are a bit morecomplex both in terms of therequirements that are required but alsoin terms of the way they're connectedwith the other systems and if you lookat the examples we have a bankingtransaction app might be kind of astandard a standard if the number ofmission Chronicle labs are not as manyas for example internal corporate appsbut they have moredependencies they also have a lot moreinterconnected systems and also moreapis that are exposed a lot of themission critical apps also have higherrequirements in terms of scalability interms of availability and also likethings like low latency and so the theamount of research that are required topower these applications are a bithigher than the first applicationpattern another kind of characteristicof mission critical apps is becausethese are often used to power thebusinesses they are all sometimes usedfor data analytics as well so if youhave a lot of important data as part ofyour application your business users areKeen to use that data for analytics andalso for AI and ML workloads and sothese applications are not justStandalone but they also connect todifferent workloads such as analyticsmachine learning both training andserving and also some of the more recentjmei workloads that you have seen todayto be more grounded on your Enterprisedataum and I guess last but not least theyalso require a lot of governance andcompliance standards to meet those andso you want to make sure that theservices that are powering these type ofapplications meet those standardsa typical architecture could besomething like this if you have amission critical app a lot of theseapplications are not single region boundthey are multi-region in nature and soyou would deploy services that are thatcan support multi-region applications uhthere are also sometimes have differenttraffic so if you have a load balancerup front you can actually deploy anddirect your traffic based on theproximity of your users for each of thedata centers that we haveum the the in the middle section you'llsee that you know we recommend using gkewhich is kind of our Flagship productfor our compute layer and gke you youwill distribute based on yourapplication workloads and wrap it aroundwith service mesh to man to handle thegke fleetsin terms of the database we recommendusing a different well you can actuallyuse multiple different databases but forthis work to upload lodb's newestfeatures are really great because theyoffer both high performance they alsooffer four nines of availability butalso one of the cool features of iodb isthat it offers built-in analytics andaim of capabilities and so compared tothe standard postgres lodb is up to fourtimes faster for transactional queriesit's up to 10 times faster as announcedyesterday for Vector queries for Jaiapps and it's up to 100 times faster foranalytical queries so if you have a adhoc real-time analytical upload insteadof building a separate data warehouseand all the data pipelines you might beable to get away with just using lab forthose ad hoc real-time smallishanalytical workloads with just alloyedbso for Mission critical apps just tosummarize you want to make sure thatit's multi-regional that it supportsdifferent services and of coursedifferent workloads like analytics andAi and ml are supported as part of thoseservicesone example we'd like to share is ourfluidify which is a Canadian company forblockchain they're running theirblockchain workloads on top of alloy DBwhich supports more than 2 billionrecords as they moved over from AmazonAurora to loudb they were able toachieve three times faster performancebut at the same time reduce cost by 60so you kind of see that you knowsometimes it's easy to kind of assumethat the services across the vendors aresometimes similar but depending on theworkload and the characteristics andtheir needs there's actually can bequite drastic differences between thedifferent vendorsall right and the last pattern that Ilike to talk about is elastic cups theseare a little bit different than thefirst two in that they're not more interms of the amount of apps out therethis is more about the characteristicsof the app if you think about apps likesocial media the number of apps outthere might not be a lot but the actualnumber of users using per app can besubstantial and so the last applicationis something that we characterize asconsumer facing requires five nightsavailability can't go down because yourbusiness and your customers expect thatthey have to have super low latency theyhave to have fast read and writeperformance on the database and theseapps have to be able to scale up anddown without being with even forunpredictable workloads and so a lot ofservices that are good for these typesof applications are based on serverlessarchitectures because sometimes like onholidays or on you know sports eventswhere you can't really predict who willwin and you just have to make sure thatyour service is scale up serverlessapplications several services areprobably a good candidate for these typeof applicationsand sometimes the applications alsorequire things like you know Globalconsistency because they are yourapplication have Global users and alsooftentimes they also require things likeend-to-end encryption because a lot ofthese applications are consumer facingyou want to make sure that the data theyhandle are secureuh a sample architecture you can seehere is if your application is global byNature you might want to use a globalload balancer up front to be able towrite redirect traffic sometimes youmight want to use like a cache or a CDNif you're more content heavy but on themiddle layer Cloud run is a good optionfor these type of applications becauseof nature that it's serverless it willscale up as needed but also it willscale down to zero if you have notraffic which results in saving a lot ofcost a lot of a lot of times you know asdevelopers make mistakes and overprovisioning where we're kind of wastingresources or we're under provisioningand we have some downtime and so aserverless in service and this and thismakes you make sure that you are goodfor both scenarios in terms of thedatabaseum you know we recommend using spannerbecause it has virtually unlimited scaleso if you have a app and suddenlybecomes a unicorn rest assured you arecovered with spanner it also offers fivelines of availability and so it's one ofone of our services at the highest levellevel of availability a lot of ourcustomers in both gaming and financialcustomers use Banner for those workloadsuh sharechat is a good example for thatthey're a social media company Indiaum and they are able to move a lot oftheir workloads to uh SharePointsharechat you know serves hundreds ofmillions of users and they also servemultiple types of unstructured data likeimages and text andum and uh and movies and so when theirtraffic move increased by more than 500percent a number of days spanner wasable to scale up without any change inin the in the application code and meetthose demands and Graphics um as aresult sharechat moved more than 100tables over to spanner and like theexample before they will they were ableto save cost by 30 percentso to summarizeum like when to use what if you look atkind of the chart here uhif we just think about the compute layerand the database layer for computethere's really kind of two options likeHarris mentioned before if you're justgetting started you don't know howsuccessful your app will be and you wantto make sure you're not you know wastingtoo much resources Cloud run is a goodplace to start it's serverless it'sfully managed and it's really easy toget started in terms of getting your appup and runninguh and then later on if your apprequires more configurations more knobsand controls you can always move thosecontainers to gke to get the best ofthat and then there's also a autopilyversion of that if you want the fullymanaged version of gkeon the database sideum it's you know it looks like fiveoptions but depending on your workloadit can be more easier to select ifyou're thinking of a relational databaseif you need asset transactions if youneed strong consistency for example it'sreally kind of three options Cloud SQLlodb and spanner and I kind of like tothink cloud SQL is our easiest fastesttime to Market get started kind ofdatabase it'sprobably the cheapest to get startingwith Cloud SQL as well and it offers 100compatibility with the open sourceengines like MySQL and postgres and thenif you have SQL Server you can alsomigrate from like to like with Cloud SQLand then recently we announced Cloud SQLEnterprise Plus which offers four ninesavailability so if you have if you wantto start quickly but also need a bitmore performance and availabilitythere's a special Cloud SQL EnterprisePlus version that you can also takeadvantage ofNexus lodb it's our newest database thatwe launched about a year ago and youknow we've in the in the keynote we'vetalked a bunch about how ledb has allthe new AI featuresum not only is it kind of the cooldatabase but it has open sourcecompatibility with postscripts withpostgres which is one of the mostpopular or popular growing open sourcedatabases in the world today and lodb isfour times faster in terms oftransactional queries it's up to 10times faster for Vector queries and upto 100 times faster for analyticalqueries compared to standard postgres soif you have a postgres workload it'spretty much a no-brainer it should getstarted with lodbum it's uh it's one of our newestdatabases and it's one of our mostpopular database enginesand then if you have kind of the bigworkloads you need you may needunlimited scale uh you uh you might needfive nines of availability you uh youwant multi-master and multi-primaryum and you want like strong consistencythe only database in the world that cando all of those is better it's a veryspecial database that powers all of mostof Google applications like Gmail andYouTube and others and it processes morethan 2.75 billion requests per secondwhich is more than an order of magnitudeof any of our competitors can do so it'skind of a true Flagship product for themost demanding workloads out thereuh those three are the relationaldatabases if you have special needs fora nosql database which is a good choicefor if your workloads hasum requirements for very fast rights forexample uh bigtable is a key value-widecolumn database which is reallyspecialized for those type of workloadsthings like iot or things like buildinga you know a very fast write basedworkloads big table is great and then ifyou are building a mobile application onthe Firebase platform firestore is agreat database that integrates as partof that it's also a document database soif your application is based on Java orJson a document store might be very easyto integrate as part of thatso those are kind of our optionsum again these are the building blockswe just showed you three examples ofwhat you can do but there are many moreand we'll like you know there'll be q asession attended we can help answer someof the questions that you may haveuh and just kind of to close out youknow there are customers in everyindustry for every workloads and everyusersum that we've you know we've helpedwe've been happy to support uh and a lotof these customers have been with us andTrust as we trust Google as their Cloudum and you know personally I thinkGoogle cloud is probably the best placeto run the data workloads not onlybecause of the AI technologies thatwe've innovated but because of thebattle tested nature of our servicesthat have empowering empowering Globalapps for a very long time and so withthat I'd like to invite John on stage toshare how Wayfair has gone with theirmodernizing Journeythanks Seanokay got it right here okay hi everybodymy name is John Keane I'm a director ofengineering at Wayfair my teams supporta lot of the back end Services Centralproduct catalog pricing Services as wellas supplier back-end configuration andIntegrations on top of that the dataengine and ml engine environment forcatalog and pricing Etcum so what I'm going to talk about todayis is a little bit about wayfair'sjourney and through over the lastum well really over the last uh 18 12months or sothe Google but really what I want tomake it clear iswhen we talk about this we Wayfair usesalmost everything that uh Harish andSean spoke about we have a significantImplement implementation of gke myservices run from everything from 50 to90 ktps sub 10 milliseconds at Peak fournines to a 12 petabyte data set in gbqand gbt so we have a wide selection ofGoogle products that we use thePartnerships that we have with Googleare very deep and they range everythingfrom like security and compliance toAnalyticsI can't cover all that today so what I'mgoing to be talking about is the thingsin blue we're going to be talking aboutthe the transformation fromum getting off these late large Legacymonolith databases in SQL and a SQL andum going through a microservicetransition as well as getting intosingle purpose databases using alloy DBCloud SQL you know yada yada but it'sgoing to be mostly the blue boxes soumand uh it's gonna be we have about 10minutes uh well a little bit longer thanthat but about 10 minutes and it's soit's going to be a high level overviewif you have any questions I'm happy toanswer questions at the end can godeeper in any particular area but um butwe're going to stay pretty high level aswe go through thisso what is the problem and I think I I'dbe surprised if ifeveryone in this room wasn't sufferingthe similar problem you havearchitecture that well intended at thebeginning it grows organically over timeand pretty soon you kind of wake up oneday and you're like oh my God what do wehave here we have to unwind this we wantto make progress and what you find isyou find that your ability to innovateis taking longerand you when you want to get to the newtechnology platform to unwind some ofthe the complicated knots of wires isdifficultin our case we had widespread use ofshared data so we had I think largedatabases order product customerEtc large SQL Server instances that manymany teams did direct reads and writesto so unwinding that was is a verydifficult problem and what we found isthe more we built the more complexity weintroduced and the more and the more ittook to maintain and innovate and it'sslowed Innovations so and the thing wasthat we found was obviously the cost toextend is not only an impact on computebut also on people resources too so youneed more people to power more softwareand and and the costs growand sohow do we approach this and so andso as we think about it the one thinguntangling those wires wasum took a very concerted effortum we the thing to understand is we havethese databases will have tens and tensof thousands of database objects so allbeing used by many teams across thecompany and we realized through thisprocess that you know this is a 700person organization with hundreds ofatomic teams and we realized throughthis process that we couldn't allow forteams to vary on their own and choosetheir own path we didn't have a commonway of describing process you know oneteam would say they're 20 hey John I'm80 through my my tech transformation andyou know another team would be 50through but they were talking aboutdifferent things you know one would bemeasuring just a portion of it and suchand then we didn't even have a becausethere are different common denominatorswe couldn't actually determine progressso if my boss or my boss's boss asked mehow far we were through it because we'resetting capacity aside from our businessstakeholders we couldn't really evenanswer so we needed to create thesebuckets to allow us to then put metricswithin each one and teams could thendescribe where they were on the journeyand then also we could then measure itand talk about progressumone thing we the way we approached itwas first of all we wanted to Defineownership of all these key databaseobjects again 10 000 entities we usedalgorithms Etc to map these and assignownership across our 4 000 personorganization engineering organizationand then we brought in a Federated graphfrom Apollo to help us create anabstraction layer between the clientsthat we're asking for data and the thedata stores on the back end because inthe end our goal here is to get to theseindividual microservices and individualsingle purpose databases like Harish andSean talked about and be able toleverage those patterns that we talkedabout earlierand finally the last thing is we wepartner with Google and Apollo toactually help us train our staff becauseone of the things we realized wasalthough people had experience withGoogle cloud and people had experiencewith Apollo Federated graph they didn'tactuallyhave the depth of knowledge that neededto make some of the most complicateddecisions and and to architect it forthe future in the right way so wepartnered to bring in additionaltraining for the teamsso the before and after architecture sowhen we talk aboutum when we talk about moving fromunwinding these wires I'm going to talkabout a single service but keep in mindthat every single one of these teamswe're talking about hundreds of teamsand each one has many many services alldoing live reads and writes to theseshared databases what we found is no oneteam actually had autonomy becausethere's no clear ownership of data rightlike so if if your service and oneexample is our product database isgetting 242 million direct select starfrom XYZ direct reads against thedatabase every single month so if youare a if you are on the part data teamand you want to unwind your parts ofthat that table product you can't do itbecause you have all this live trafficcoming to it there's no way that you canactually affect change and then moreoverchanges Federated across the ecosystemwe have we have large large-scalereplications of every this thesedatabases throughout the entireecosystem so even if you have thecontract that you know and you know thecalls that are making directly on thatinstance of it your replicated instancesmaybe getting live traffic themselves soyour data contracts actually extendedand throughout the entire organizationwhich makes it almost impossible to makeany changesso what we wanted to do and so our goalwas again to get to Cloud SQL spannerevery team to be able to have autonomywithin their data and their data domainand so um and well the last thing is isthat even the services where we hadservices in place they actually mirroredthe data structure underneath so thesame data contract that existed in thetable existed in the replicas alsomanifested themselves in the requestresponse Services typically sitting upum so so what we did was we as Imentioned Federated graph and we broughtin Apollo and what we want to do wascreate a logical abstraction between theclientscalling the data and the data sourcesand the services themselves and that'sFederated graphql is actually excellentfor that it allows you to create alogical representationfor the schema and actually itrepresented the first time in ourhistory where we actually had aseparation between the physical how thedata was stored at rest organized andhow clients storefront our partner homeorganization partner home UI actuallyrequested the data and in this futureState they will not have to understandanything about the underlying servicearchitecture just understand the datathat they actually need to consumelet's see what else um and so again withthis with this with these changes inthis architecture uh it allowed everyteam to um own their own space of dataand have a clear line of sight and howto improve it they actually had clearline of sight on how to improve theiroverall architecture and and drive itnow this is one service again we havewe're talking about hundreds of atomicteams uh 700 person organization andscaling this across that largeorganization of people so that they'reall making the right decisionum is is it is the challenge that we'reundergoing right now we're we're somedistance into the journey as is uh andwe have some some wins and some lossesthrough it it's uh it's difficult toorganize that many people and haveeverybody because you have a lot ofdependencies you know some teams may usethe same source of data and how do yousequence those thingsas we um as we kind of go through itum that that that scale that ability todo that in such a large amount of peopleis actually where we're investing prettyheavilyum and I I mean I guess I can't be atthis this uh this uh event withouttalking about gen AI in some way someslide having 10 AI in it but um but thisis actually an area of significantinvestment for us because we believethat this is the opportunity for us toradically accelerateour code migration and Techtransformation Journey so here's thethings that we're doingumagain we have tens of thousands ofdatabase objects we have by the way the10 like we've had like as those databaseobjects have aged some people haven'tmaintained them in years and the peoplewho wrote them aren't no longer here sowe have to not only understand them tobuild a new schema but then we also haveto to uh to scale that out across anorganization so what we're doing iswe've partnered with Google Palm toum code bison Etc to one take embeddingslook at our Corpus of knowledge uh WikiConfluence I think that's that sort ofthing use embeddings for that and thenuse that to understand with an llm tounderstand what the SQL code is actuallysaying so if you have something SP IDwell how do we abbreviate SP what doesthat mean in most colloquialisms when weuse it okay it means this sort of thingor Su supplier you know so use useembeddings to help build that Corpus ofknowledge and generate understanding anddocument for all those Legacy SQLobjects it will also use that knowledgeand understanding and training to thenbuild the graphql schemas for usand then cobison will also then be ableto generate the code the backingsubgraph code on the back end andconnect up the Java python libraries tothat graphql schema that it just builtroll that out we have systems to rollthat out into production do automaticPRS do you know coach X all that stuffget that outall of this is being at this stage isbeing wrapped by tests on both sides andthen the next step is to move the livetrafficthe tricky part and we haven't startedwe have we have this all kind of movingforward right now we're in variousstages of each one of these steps andgetting it to production to be able totest on an isolated subset of the tablesbut for the live traffic what we'll dois we will actually have Cody and we canprove we can do this we'll generate apython graphql query based upon theselect statement so select star orselect star with a join becomes agraphql query we could push an automaticPR to the team that owns the code andthen say here you guys can own it youguys can you know deploy it use itwhatever but you need to be off of it bythis amount of time and we believethrough this process it will radicallyaccelerate our ability to get all ofthat live traffic table product 242million things a month get all of thatoff the database calls directly and thatgives the team's autonomy and space toown their own architecture and be ableto get to alloy DB spanner like thosespdbs in the back end and get out get usout of the Legacy Microsoft SQL Serveruh large large-scale databases which areexpensive to maintain with the datedfile system and everything like thatfinally the last bit is is that stepthat I talked about at getting to thedata store which is using Cody andgenerative AI to actuallyhelp write all the migration scripts togo from the Legacy table product towhatever whatever you need so forexample table product 144 50 columns mayhave I don't know 10 objects in it thatare represented in graphql schemas theybecome brand or they become you knowmaybe there's product there's therecould be part data you know these areall entities within the graphql schemawe use that knowledge of what the systembuilt and trained on to create thosethings for us and then we use that tohelp build the migration scripts so thatit will generate the migration scriptsto Move It fromthose 10 Fields within table product toan alloy DB or something like that andthen wrap it all with tests so we we canwe hope and I hope I am back here nextyear talking about the success of thisum but it but it actually has thepossibility to accelerate our Techtransformationhelp us with our customer stakeholdersbecause obviously you know businesswon't sit and wait for five years for usto do this by handtwo is it also allows us to get bettertests and document our Legacy code Imean those are those are two big winseven if we just did those I mean in someof these cases it would be a huge winfor us so so when we talk about GeneralVI the interesting thing is said in abunch of sessions yesterday and and oneof the things a lot of times it seems toresonate is you know we talk about likesearch and you know image detection andimage duplicate detection those are allyou know exceptional image generationbut to me this is one of the coolestthings you know I don't know if anybodyhas done these kind of things many timesin your life but having done this acouple timeslike it's you're working in the weedsthe entire time and something that canreally help you document what you havehelp you migrate to the new thingum is is really exceptionalum and it the possibilities are endlessfor us in this spaceum finally the last thing I'll say iswhen we first moved into the cloud Ithink everybody's been here we balloonedour Cloud spin it was it went out ofcontrol we actually we I mean this isthis is going to soundsimple silly simple but what we did waswe create transparency andaccountability we connected to theGoogle billing apis we put them inspreadsheet big visible spreadsheeteverybody saw it teams got the spend gotmapped to teamsand then we train Engineers on how tooptimize it our goal was to get the 20optimization we actually were able toachieve 58 optimism 58 reduction in ourspend annualized over a seven monthperiod happy to spend a bunch of timetalking about that but I just didn'tthink that any Tech transformation Ishouldn't mention cost uh costefficiency because thin Ops should bepart of everyone's mindset in this roomas they as they as they enter do Cloudwork because the cloud doesn't allow foryou to think of it over the wall like weused to way back in the day maybe I'mdating myself but but today it demandsthat every single engineer haveunderstanding of both operationalexcellence development Excellence aswell as the cost and the financialcomponentagain all of this would wouldn't bepossible none this would be possiblewithout the great partnership Karen andby our partnership with our with Googlehelping uh bridge the gap with theproduct teams as well as uh as well asour black belt team that uh helpedassist on some of the postgres and SQLmigration I can't say enough about theGoogle partnership it's really beeninstrumental to this and um and that'spart of the reason why I agreed to comehere and I'm really excited about thiseventforeign"
}
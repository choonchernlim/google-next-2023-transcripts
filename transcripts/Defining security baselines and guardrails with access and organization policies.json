{
    "title": "Defining security baselines and guardrails with access and organization policies",
    "presentation_type": "Breakout",
    "categories": [
        "Security Professionals",
        "SEC201"
    ],
    "video_id": "jmWZFdCE0mM",
    "time": "Aug 29 03:30 PM - 04:15 PM CDT",
    "transcript": "[Music]hello and welcome everyone my name isFlorence gotu and I'm a product managerhere at Google I'm really excited to behere today thank you for joining us forthis breakout session on definingsecurity guard rails uh with access andorganizationpolicies so what are security guard RSon anyway well detection and Remediationof security vulnerabilities or threatsis expensive and often too late toprevent severe impact to your businessat Google Cloud we take preventionseriously to help make this to helpcustomers make the shift towards apreventative security posture we havebeen investing in security controls thatallow administrators to establisheffective security guard rails thatprotect your resources and datatoday you will hear from box and snap onhow they establish and mature theirsecurity guard railframework and while they share similarsecurity goals box and snap startedtheir Google Cloud Journey fromdifferent points snap was one of thefirst few gcp customers and theirsecurity guard rail approach hascontinuously evolved over time while boxhas had the more recent migration to gcpand which has given them a chance todesign the security guard rail fromscratchdespite their different history gcpsecurity guard rails were flexibleenough to allow both organizations toestablish a mature security guard railframework and meet their security goalsyou'll hear more about this shortly butfirst let's do a around ofintroductions alongside me today we willhave Matt Bose senior staff securityarchitect at box we will also have Bachbahaman a production security engineermanager at snap and actually the aproduct manager from Google cloud andwith that out of the way action I willfirst cover a brief overview of gcpsecurity controls that can be used toestablish effective guardrails starting off with why adopt thistype of approach in the first place asan Enterprise continues to scale theirCloud footprint it becomes verydifficult for a centralized Securityadministrator team to rely on reactivecontrols to enforce their securityposture without impacting developervelocity in addition violation detectionand Remediation adds toil and costinstead these security teams rely onestablishing a security guardwellframework shifting their securityposture towards a preventative approachthis allows administrators to establisha developer self-service model foraccess management capabilities that isin compliance with their organizationsecurity requirements this model reducesthe burden of having to process accessmanagement requests resourceconfiguration violations or othersimilar security issues let's take alook at some of thesecontrols and I'm as I'm sure you alreadyknow IM am allow policies arefundamental security controls thatallows administrators to manage accesscontrols for resources they own howeverI am allow policies on their own to notestablish car rails to enable developerSelf Service nor do they shift thesecurity posture towards a preventativeapproach instead I IM deny andorganization policies are thefundamental Primitives for establishingsecurity guard rails on your resourcesanddata now in order to adopt thesecontrols safely and at scale GoogleCloud also provides intelligent policylife cycle management tooling thatsimplify administrative operationsenable policy safe rollout and powercompliance reporting these toolscombined with these Primitives andGoogle's machine learning capabilitiesdeliver a complete framework work toallow administrators to establish aneffective security guard rail approachlet's cover each of these Primitives aswell as some of the policy life cyclemanagement tooling and moredebt and really the first layer in ourdefense in- depth tool Suite is I amdeny which allows administrators toexplicitly deny access overriding anyexisting or future IM allow policies IMam denies a resource Centric controlwhich means the policy is attached tothe resource and once attached thispolicy cap a list of permissions thatwill always be denied when performed bya set of given principles theseprinciples will never be able to performthose actions on that resource even ifan IM IM allow policy Grant explicitlyallows access this can be used to enabledeveloper self-service and minimize theamount of access management activitiesby the centralized Securityadministrator team this team can grantdevelopers wide access to theirenvironment and use I deny to proveprune or set guard rails on the overallpermissions that can be executed withinthisenvironment for example imagine anorganization that is highly focused ondelivering machine learning models totheircustomers uh they probably have a quitelarge data science and data engineeringdepartment now these teams rely onautonomy especially the developers andthe centralized security team could notpossibly keep up with all the accesschange management requests or um othersecurity control changes withoutimpacting their velocity as anorganization instead the centralizedsecurity team could Grant wide access tothe development environment and Define anumber of key IM IM deny policies thatprevent unauthorized actions for exampleyou could have a deny policy thatprevents his team from purchasing bierycommitments or from creating serviceaccount keys in this example the teamwas was able to control costs as well asprevent unauthorized service account keyleakwhile at the same time enablingdeveloper velocity within theirenvironment and giving them as muchflexibility as possible in the way theyoperate now since I am Deni policies canbe applied at any level of the resourcehierarchy this is a very powerfulsecurity control that you have in yourtoolbox and in addition to preventingactions on resources you will now hearfrom AE who will talk about how toenforce restrictions on resourceconfigurationsdatar I'm a product manager here atGoogle a key resource Centric layer isorganization policy or art policy whichallows you to control which resourceconfigurations are permitted in yourorganization AR policy is a fundamentalnative gcp control that uh allows you tocontrol your or protect your resourcesum independent of principles or resourceactions and just like I am denyadministrators can apply this guardrailat any layer or any level of theresource hierarchy Arc policy serviceinspects each and every at atconfiguration time it inspects each andevery resource action and non-compliantrequests such as creating anon-compliant resource configuration orupd updating a resource to anon-compliant state will get rejectedsome really popular use cases for Arcpolicies include restricting locationswhere resources are permitted uh for youknow local uh local compliance reasonsuh restricting external traffic uh toprotect against breaches and exploitsand ensuring that you only use hardenedand trusted images for yourresources and and many many more thereare essentially two types of orcpolicies that gcp offers first we have aset of predefined pre-build uh orcpolicies that we have identified basedon industry best practices um uhfeedback from customers such asyourselves as well as red team findingsthese are hardcoded and they are readyto use for you second I am reallypleased to share the public previewavailability of customar policies forgke GCE and and data proc with customMark policies you can author really finegrain tailored guard rails specific toyour unique security requirements usinguh easy to use easy to read commonexpression language based logicalconditions um as an example consider ause case where you have um you want toensure that only trusted images are usedfor your gke uh applications and gkeworkloads and only in certain sensitiveenvironments you can easily set up thisorc policy this custom orc policy usingthe frame workor that I just describedand effectively you reduce the amount oftime needed to make policy changes downto minutes andhours now in order to safely adopt andscale these guard rails in yourorganization uh like Floren mentionedgcp offers a suite of policy life cyclemanagement tooling uh we cover theentire life cycle of your resources fromuh designing effective configurations todeploying resources and detection aswell so recommendation tools like I amrecommender Leverage Google's mlexpertise to help you design aneffective security posture once thisposture is designed uh in order todeploy it safely and securely uh we havea set of tools that allow you to do thatas well as part of a safe deployment uhtooling for one example is policysimulator which allows admins tounderstand the impact of policy andposture changes on existing resourcessimilarly you can also set policy andposture changes in dryon mode tounderstand how they would behave uh inthe real world through audit logsand finally gcp offers a robust set ofdetection and troubleshooting tools uhwhich help you monitor for example thestate of compliance using policyanalysis triage errors through troubleshooting and identify drift throughviolation uh reporting um now that wehave covered a few Basics about how weapproach security guard rates I wouldlove to invite Matt over to Showcase howbox uses um our controls for securityguard RA in GoogleCloud thanksOE hi I'm Matt Bose of senior staffsecurity architect at box I came to boxabout three years ago during the startof our gcp migration my mission was tobuild a secure foundation for gcp thatwould allow us to migrate our on-premdata center to thecloud today I'm going to tell you aboutbox our security culture how weImplement prescriptive security guardrails and lastly what security featureswe're excited about in gcpa little about box box is a cloudcontent management platform with almostan exhibited data being stored sharedand collaborated on we have a customerbase of Fortune 500 companies governmententities and individualusers at box we are a uild it you ownitculture we perform all productionchanges via code and we have centralizedteams that control foundational servicessuch as networking project creation I amand soon the security goals that I'm going todiscuss are to implement prescriptivesecurity guard rails to follow theprinciple of lease privilege and toimprove developer velocity by providingfeedback early in the developmentprocess to accomplish our goals we takea defense in-depth approach and applymultiple security guard rails to ourorganization today I'll discuss three ofthese guard rails first we have orpolicies then we'll talk about our leasepermissions model that we govern via IMam policies and finally we'll talk aboutour infrastructure as code policiesorg policies are part of our secureFoundation they allow us to establishpreventative guard rails to restrictwhat actions can be taken they simplifyoperations because they can be set onceat the root of the organization andpropagate out to all resources weprioritized evaluating and implementingor policies at the beginning of our gcpjourney to ensure that ourinfrastructure was built securely fromthe start our first priority with orgpolicies was to restrict Public Accessand to only allow box identities to beout added to box am policies we didn'tapply every policy we selected thepolicies that would help us meet ourrequirements we manage all of our orgpolicies via code we store them in acentral location and one team isresponsible for org policy changes weapply most policies at the org level andthey're inherited to all the the entireenvironment and to provide a consistentexperience we try to keep the policiesthe same in eachenvironment there are cases whenenvironments or projects will havedifferent policies one example is wehave an external IP constraint thatblocks uh publicIPS but we have specific networkingprojects that need the ability to usethese public IPS for those projectswe'll set an exclusion and we'll allowthem to provision public IPS this allowsus to reduce the risk of exposing ourworkloads to the internet except for theexact workloads that needit next I'll talk about our IM IMpolicies our these permissions modelwhich is governed by IM IM policies is acore Concept in our security strategywhen we decided to move to gcp we had tofigure out how to implement a leasepermission process we had the time todesign and and plan this uh processbefore we were moving our workloads togcp here's how we do it first we don'tuse any of the basic roles which areowner editor and viewer these roles aretoo powerful they Grant access to anyservice in gcp and they will not meetourrequirements we also do not rely on thepredefined roles even though they are inwhat they can do they still have morepermissions than what's actuallynecessary instead we create custom roleswith custom roles we can define a smallgranular set ofpermissions since we aren't using thebasic roles or any of the custom rolesor the predefined roles we needed a wayto allow access to specific gcpservices to do this we create a customdeveloper role this role is curated byus and includes permissions to all thecommon gcp Services we use at box weGrant this role to use users and serviceaccounts in our development environmentit gives developers the freedom tocreate resources and develop theirapplication but this role itself doesnot meet our lease permissionsrequirement so how do we go from thisdeveloper role to a role that will meetourrequirements we do this by quaring theam and insight the am insights andrecommendations API that gcp providesthe I am recommender tool gives us anexact list of permissions that have beenused by a specific identity we analyzethose permissions then we create aunique custom role on based only on thepermissions that were used we thenreplace the developer role with thisunique custom role that was tailoredspecifically for thatidentity we don't want to have to gothrough this process for for repeatablepatterns for those scenarios we'vecreated custom roles for services thatare commonly used for example we have acustom rle for compute engine that onlyincludes basic permissions like theability to log to Cloud logging if ateam needs a standard VM they canrequest this role and they will alreadymeet ourrequirementsthis process has allowed us to reducepermissions on average by about 99% whencompared to assigning a default rolelikeeditor now this was a crawl walk runprocess we started out with a completelymanual task where we just copied outputout of the console we then experimentedwith using Cloud functions to retrievethe output and ultimately we landed on afully onboard a fully automated processthat ties into our Cloud onboardingprocedures another part of our securitystrategy is to make the console readonly in production environments in ourDev environments users can log into theconsole they can man manipul manipulateresources in production the console isreadon users can log in they can viewtheir resources but that's it the way weaccomplish locking down the console isby creating a readon version of ourdeveloper role and assigning that tousers in the productionenvironments there are times when breakBlass permission there are times whenelevated permissions might be neededlike during an issue in these cases wehave a break glass process where we canassign elevated roles we do this withconditional I am policies with a timeframe being the condition this willallow the issue to be addressed and thepermissions will automatically beremoved when no longerneeded now that I've established how weuse IM am policies to meet ourrequirement of Le lease privilege I'lltell you about our next guardrail IACpolicies since we require all changes tobe code we could add a governance layerthat checks and validates all changesbefore they're applied org policies areat the end of the process and stop aresource from being created our IACgovernance is at the beginning of theprocess and performs checks beforeresource creation ever starts this ispart of our defense and depthstrategy as I mentioned before we wantto shift feedback to earlier in theprocess and inform developers early ifthere is an issue so to help providethat feedback we recreate org policyconstraints in this governance layer ifcode that will violate violate an orgpolicy is submitted it will be caughtbefore beingapplied and because we have the abilityto write custom policies we're notlimited to just the policy policies thatgcp provides any attribute that our Ipipeline outputs is something that wecan perform a check on and validate thatit meets our requirements if it does notwe'll notify the developer and block thecreation of theseresources I previously mentioned that wedon't use basic roles currently there'sno org policy that we could configure tostop the assignment of theseroles so to compensate we have an ipolicy that checks all I am bindings tosee if a basic Ro is being used if itsees an assignment it will block thechain and inform the user that theycannot use this role this I governancelayer allows us to shift left byblocking misconfigurations before theyever happen and ensuring our resourcesare created securely from thestart here's an example of all three ofthe previous guard rails workingtogether we wanted to give the abilityfor users to deploy load balancers butwe don't want them to expose those loadbalancers to the internet the firstproblem we faced was the I role for loadbalancer creation is agnostic meaningthe same role lets you create internaland external load balancersso we gave users that role but we alsoconfigured the load balancer org policyto only allow internal load balancers tobecreated that worked great anytime a usertries to deploy an external loadbalancer the org policy stopsIT the next problem was that the orgpolicy stopped the deployment after thecode tries to execute and that couldcause an issue with deployments thatfailure was in the middle of thedeployment process and left resources ina bad State such as partially configuredand as you would expect that was a badexperience fordevelopers we needed a way to validatethat the or policy constraint was metbefore resource creation started so wecreated an i policy to check to see ifexternal load balancers were beingprovisioned if it was theier would getfeedback during the process that theysubmitted the wrong load balancer andthey would not be able to move forwardwith thisconfiguration by adding a check to thebeginning of the process we were able toprovide feedback early and guide thedevelopers to a secure deployment thisexample showcases our defense in-depthapproach to the use of three distinctsecurity guard railcontrols looking forward we're excitedto leverage new security tooling fromgcp to strengthen our security posture acouple of the tools we're excited forare custom org policies which will allowus to convert our IC policies to orgpolicies and strengthen our defense in-depth approach and policy life cyclemanagement tooling to help ensure wehave a safe roll out of new policiesthank you so much for the opportunity tobe here and now here's Bach fromsnapthank you Matt for the intro and forsharing with us Box's approach toestablishing secure access guardrails all right good afternoon everyonemy name is bak bahamin and I am themanager of snap's production securityteam um we're a group of Engineers on amission to safeguard snap's productioninfrastructure and provide itsdevelopers with a secure environment todeploy and hostServices snap's adoption of Google Cloudgoes back to our company comp's earlyBeginnings the backend services for apopular app Snapchat launched an appengine over 11 years ago during my sevenyears at the company I've had theopportunity to witness the evolution ofour production infrastructure from amonolithic app engine hosted service toan expansive environment powered by adiverse set of compute Network and dataresources today I'll be sharing with youhow snap approached this transition thetools that our team developed to supportthe company through this journey thescale at which we operate and some ofthe ways that we leverage in-housedevelopment and Google Cloud providedsolutions to harden our infrastructureand establish reliable access guardrails at snap we strive to buildproducts that are smart kind andcreative and we wanted a accessmanagement solution that was consistentwith these Core Company valuesfor a solution to be kind it needed topromote developer agility and give ourEngineers the flexibility they needed toiterate and innovate rapidly our desiredsolution would therefore need todelegate routine accessdecisions um to the service teams and asmuch as possible remove our team fromthe developer requestpath for a solution to be smart it wouldneed to continuously Drive the companytowards the security principle of ofleaseprivilege where all approved permissionsmatch a recorded and valid business needit would need to also provide us withreal-time visibility into employee andservice account permissionsensure that all policy non-compliantpermissions were prevented and ensurethat all policy exceptions would beultimately funneled to our team forproper review andvalidation finally we needed a creativeapproach to weave this n accessmanagement framework across a productioninfrastructure that was already servinghundreds of millions of snapchatterseveryday said a little bit differently wewanted a solution that would allow ourdeveloper Community to retain a relativelevel of autonomy but allow us toenforce a number of security guard railsas they explored new cloud services andparadigms for this we built an internalauthorization management solution thatorchestrates permissions in across ourentire productioninfrastructure this solution includes aweb portal that developers can navigateto and where they can request a numberof predefined and custom roles in ourgcpenvironment in the example depicted herea snap developer is requesting objectviewer permissions on a gcp project whenrequesting permissions employees canelect for time bound or indefiniteaccess based on their needs and usecase once the request is submitted it isautomatically forwarded to Resourceowners or resource administrators forapproval at snap we have definedresource administrators for each gcpresource in our environment these adminstypically the service and project ownersthemselves are responsible forvalidating each request based on theemployees job role are um the requestedpermissions the requested term and thedocumented businessjustification once the request isapproved our solution automaticallyapplies the appropriate gcp IM policiesin ourenvironment for short-term grants thesolution also automatically revokesrevokes the policy once the policy oncethe approved term hasexpired finally this solution maintainsauthoritative controls over all of ourGCS gcp policies and any policyconfigured outside of the solution isautomaticallyrevoked from an ergonomics perspectivethe solution has scaled well and allowedus to distribute validated authorizationcontrols across a large gcp footprintmore importantly it gave the company thenecessary flexibility to rapidly iterateand overtime transition out of a singleglal app engine project and into theservice oriented and mesh architecturethat we operate intoday at present day our solutionhandles hundreds of thousands of accessrequests every year and allows thecompany to seamlessly manage permissionsfor tens of thousands of identitiesacross thousands of gcp projects gkeclusters and hundreds of thousands ofstorageresources next I'll cover how our teamdeliver security guard rails across thisexpansiveenvironment with such powerfulpermissions extended to our resourceadministrators we needed reliable guardrails and mechanisms to prevent certainactions that may contravene our securityand privacy policies here we enforced aset of Google Cloud organizationpolicies like domain restricted sharingwhich establish limits on who can accessourresources we also apply additional orpolicy constraints that prevent theadoption of unapproved resources andservices in our Cloudenvironment additional Google Cloudcontrols such as VPC service controlsare used to cordon off sensitiveresources and prevent the data that theystore from being moved to lower trustenvironments lastly we have built customorchestration services that block mosthigh-risk Cloud mutations for examplesthese will repeal any firewall rule thatmay inadvertently expose our internalservices to theinternet our second set of guard railallow us to regularly pruneover-provisioned roles and stalepolicies stale permissions naturallyoccur over time for example an engineermay have acquired a set of permissionswhile assigned to a specific initiativebut has since been reassigned to adifferentproduct leveraging gcps I am recommendertool we are able to constantly surfaceover provisioned rules and permissionsthat are no longer in activeuse based on on access activity over aconfigurable Time window the IMrecommender provides either a replace orremove Ro recommendation for allprinciples that are not taking fulladvantage of their existing gcp Rogrants in the example here therecommender service is letting us knowthat our service account is no longerusing their storage object viewer roleon the project and that this policy cansafely berevoked at snap we've built an internalRo removal service service that queriesthe recommender apis and automaticallyremoves unnecessary permissions tocontinuously drive us towards theprinciple of leaseprivilege staying true to our mission ofsafeguarding snaps productioninfrastructure we are continuouslyevolving and looking for newopportunities to establish reliableaccess and policy guardrails from gcp product perspectivehere's what we're excited about nextwe're excited to see custom organizationpolicies go ga soon as we plan to adoptthis product to help us enforce amongstother things GK constraints associatedwith CISbenchmarks we're also excited about thefuture of recommender tools on gcp sincewe make heavy use of the IM recommendertoday we're excited to see support foradditional products like GCS buckets andbig query datasets in addition to I am recommenderwe're also excited about similarrecommender capabilities for otherpolicy types such as organizationpolicies IM am deny andothers thank you for your time and theprivilege to speak with you here at next2023 AE back toyou thank you Madden Bak uh for sharingyour approach to securing productioninfrastructure on Google Cloud you'venow had a chance to hear both from umbox and from snap on their approach toimplementing security guard rails on gcpyou might have noticed that while theirintent and their security goals arestrongly aligned their approach theindividual approach differs slightly thephase of where you are in your CloudJourney uh will impact the approach thatyou adopt for implementing securityguard rails and gcp security guard railsare flexible enough to meet you whereyou are in that journey in the last fewminutes uh we wanted to share moredetails about the future of securityguard rails in Google Cloudas part of our upcoming road map we aregoing to be focusing on three maininitiatives first we will be focused ondelivering new types of security guardrails that are aimed at givingadministrators even more control to helpthem better protect their principlestheir resources and their data forexample we are working towards Generalavailability of custom Mar policy withgke GCE and GCS and we will follow soonafter with other key gcp products suchas GCS we are also working on a newcontrol that will help uh administratorsapply guard rails on all the principlesthat they manage this security controlwill be able to enforce that anyprinciple uh irrespective of whatpermissions and access they have from IMpolicies will only have access toresources within a specified authorizedboundary as defined by theadministrator second we will continueinvesting in extending the functionalityof existing security controls we willprovide more flexible knobs for thesecontrols less restrictive limit ationsand more uniform support across theentire Google Cloud ecosystem ofproducts and lastly we will continueexpanding our portfolio of life cyclepolicy management tools we will adduniform support for the tools that wetalked about like dry run recommender uhanalyzer across the entire securityguard rails tool set we will also extendthis tools to make it easier and saferfor you to deploy posture and policychanges in yourenvironments to give you a flavor ofwhat is to come here's a brief demo ofUh custom Mo policy that illustrates thepower of custom Mo policy and policylife cycletooling consider back to the use casewhere we wanted to deployuh GK clusters only with hardened andtrusted images to do this I'm going togo ahead and create a custom Mo policyhere some something called gke binaryauthoriz enable GK binary authorizationand the goal here would be to have itact on the cluster resource type andonly for the create and updateoperations uh looking through gkedocumentation I've identified the knobthat I want to use here to enable thiscard rail specifically binaryauthorization like I mentioned and I'mgoing to add that in here using cellcommon expression language simplecondition where binary authorizationenabled equal to true then and only thenallow the constraint to becreated okay now that the constraint iscreated we want to make sure that youcan safely roll this out in yourenvironments one of the first thingsthat is available to you as part of thisis something that we call policysimulator which gives you the ability toevaluate impact of these or policychanges or policy changes on yourexisting resources the first step hereis to define the scope of this policychange uh in this example here I want tomake this policy change apply on myentireorganization once I've defined the scopeI can now go ahead and initiate thesimulator which will check all of myresources against this new constraintthat I have authored and generate areport that looks something likethis here you can see the exactconstraint that you just authored withthe condition that you just um designeduh for binary authorization checks youcan see all of the resources that wouldbe in violation of this constraint uhwith the full path making it easier foryou to understand what the net impactwould be of this uh change on yourorganization as well as on um you knowyourresources you can also set this policyin dryon mode essentially just like youwould uh modify an existing policy orapply a new policy you set the rules youset the conditions and instead ofsetting the policy as live policy youset it into a dry run mode as you cansee here now the dry run policy is in anenforced State now let's say I go aheadand create a cluster where with binaryauthorization disabled now this thisthis action will actually be permittedhowever we will generate a log entry foryou with specific dry run metadatatagging that will allow you to comparethe dry run result with the live resultand actually flag the uh resource or thecluster that was created that isoffending this specific new constraintthat you're designing now that you'reconfident with the constraint that youhave designed and you want to enforce itthis behaves exactly like your exist anyother policies that you have interactedwith before I'm adding a rule I'm setsetting this policy to enforce in myorganization layer as you can see herethis is an enforced state in yourorganization now let's say I try andcreate a new cluster with uh binaryauthorizationdisabled and as expected like with anyother orc policy this is a preventiveguard rail this will action will not bepermitted it will generate an error thatsays your your your uh resource actionviolates this new arc policy that you'reuh this AR policy that you've createdand you know you you can no longerproceed and this is exactly as weintend with that uh we have reached theend of this session I wanted to extend amassive thank you to Matt and babach andtheir teams for the continued greatpartnership with gcp uh for defining thefuture of security guardrails"
}
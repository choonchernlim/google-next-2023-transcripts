{
    "title": "Demystifying authentication and authorization for Google Workspace developers",
    "presentation_type": "Breakout",
    "categories": [
        "Productivity and Collaboration Apps",
        "COL300"
    ],
    "video_id": "5ha5xgtrl3k",
    "time": "Aug 30 03:00 PM - 03:45 PM CDT",
    "transcript": "foreign[Music]hi everyone uh thank you for comingum it's actually the first bigconference I've done in a few years andI forgot how fun it is to do these uh Ialso forgot how important it is to takecare of feet and voices uh so goodreminders I didn't do so well yesterdaybut hopefully uh we'll be fine for thistalk a little bit about myselfum Stephen basil I'm a part of theworkspace developers uh relation GoogleGoogle developers relations team forworkspace I've been at Google for comingup on aboutuh 14 years in about two weeksum so happy anniversary to meum and most of that time has been onworkspace so I've been working onworkspace apis before it was even calledworkspace uh going back to drive B1 anddocs list and some apis that don't evenexist anymoreum and I I love talking aboutauthentication and authorization becauseone of the common threads that runsthrough workspace apis which is a littlebit different than other apis thatGoogle is workspace data is usuallyowned by users it's done by users andorganizationsum and so getting permissions to dealwith uh access to data is a little bitmore complicated a little bit morefrustrating sometimesthan what you might see with apis likeMaps or gcp Services where uh and an APIkey might be sufficient to do what youneedbut workspace isn't really my firstforay into identity and accessmanagement prior to to working at GoogleI spent about seven years at RSAsecurity uh had worked on identity andaccess management as there as wellworked on some technologies thatactually became the precursors to whatwe now know as saml and some otherprotocols so this is this has been aFor Better or Worse a 20-year part of mycareer dealing with identity in some wayor another and even though it's notnecessarily the thing I focus on thesedays it's still a topic that is uh youknow near and dear to my heart and youknow I'm happy to answer questionsum and help peopleum after the stockthere we goum so in terms of umwhat to expect so I I authentication andauthorization are are huge topics theseare not things that we can covercomprehensively in 45 minutes uh or evena day there's entire conferences thatyou can go to and learn really reallyin-depth stuff about uh authenticationor authorizationum so for today uh as of the title ofthe talk implies this I want to take alook at authentication and authorizationfor workspace from the lens of adeveloper right so there's some uhinformation some data in workspace thatyou want to work with as a developer andhow do we do that and the way we'regoing to do that is we're going toactually look at four uh the most commonscenarios that you would encounterthere's going to be some that we'regoing to ignore but I chose theseparticular four becauseum they're fairly representative of likethe most common use cases and some ofthe ones that we're going to like notreally pay attention to do fit intothese buckets in one way or anotherum and what we're going to do is we'reactually going to start with a reallyreally simple problem statementum so you know hopefully really trivialand then we're going to take thatapplication we're going to morph it adda new requirements to introduce newConcepts and new capabilities until theyget to something that isum you know something going from assimple as apps script to something thatyou would see more in a Enterprise ituse caseum all the code there are some livedemos all the code is available onGitHub you can feel free to uh take alook at that later if at an employee youcan't read anything uh everything willbe available for you to readso I want to start with a really like Isaid really simple problem statementum and since I spent a lot of timeworking on uh the drive apis I decidedto pick drives it's also one of the mostpopular apis for workspace so we're justgoing to do something really simple justList the 10 most recent and by recent Imean uh most recently modified doesn'treally matter for this use caseum and we're gonna do that and I want tostart with the easiest way I know how todo this which is with apps script and dohow many people use uh apps scriptsoabout a quarter or a third of you forthose who who don't use app characterare maybe not aware of what it is it's acloud-based JavaScript runtime that justhas really tight integration with Googleworkspaceand our architecture and I'm usingarchitecture very Loosely here is wehave a user it calls the script callsthe drive API and that is it right thisis but I say trivial I really meanttrivial like this is the entirety of theapplication that we're going to runum and the nice thing is it actuallyreads very similar to the problemstatement that that we set out rightit'scalled the files list API sort themdescending order for modified limit to10 and print out the resultsumso you might like Wonder like they'resupposed to talk about authenticationand authorization authorizationwhy is there no mention ofauthentication and authorization in thecode rightum and the reason is there's a lot ofheavy lifting that apps script does whenit comes to dealing with userpermissions and identity and so onum and you know if you if you take areally naive look at that code right itraises a ton of questions right likewhose files is it going to ask is it theperson who wrote the code the personwho's running itum what else could that script do rightlike how do we know if it's safe to runif maybe I didn't write it somebodyshared it with me like I would be reallyworried about like just trying tounderstand whatuh limits are actually placed on thatthat bit of codewe'll see what it doesum and then uh you know take a lookunderneath the covers to get a betterunderstanding of what's actuallyhappening[Applause]uh so this is the apps script IDEum for some of you this will be reallyfamiliarbut you see the same code that we had upon the slideand I canrun this code and the first thing it'sgoing to do is actually going to ask mefor permissions right sofor hopefully obvious reasons we don'twant so just run code that can doanything I can do right that would thatwould scare me a lot as a userum so we're gonna see what it's going toask for and we'll review the permissionsand here we do we have to choose theaccount this is so we know whose fileswe're actually going to be accessingwho's granting the permissionsand what it wants to do is do everythingin my Google Drive and that that'sactually a fairlybroad set of permissions that I'mbranding it like I have a lot of stuffin drive I don't necessarily want toshare everything with a script but forthat move we're going to do it keep ithere and we'll talk about why thismatters a little bit later on in the endbut for a demo purpose like I'm finegrinding the scripts uh accessand once they're done it just prints outthe files just as we expected soyou know in terms of those questionsright like the way apps script works isyeah apps script is an authenticatedenvironment right it's it knows who I ambecause I'm logged in with my Googleaccount and every script I run needs tobe granted permissions in order to readmy data umthe way all this works underneath thecoversis using uh two standard Technologies uhthat you would use in your ownapplications for building on any otherplatform and this is mainly oauth 2 andopen ID and you can think of openid asjust an extension of oauth 2 justfocused on user identity so auth2 isgives you a way to uh for a user toGrant permissions to an application toaccess some of its data give grants andcertain permissions open ID extends thatnotion to that data being their identityright what's my email address what's myprofile picture my name things about meright as opposed to data that might bein my Gmail account or drive or so onbut they're very related and they formthe foundation of how apps script andhow applications in general when you'reworking with workspace API is workso kind of the best way to understandthis is we're going to take that sameapplication andwe're going to remove the support thatapps script was giving usum so fgrip did a whole bunch of work interms of knowing who the user wasum requesting the access for us managingwhere all that is stored and how it'spassed into the apis so we were leftwith a very very small amount of code ifwe want to do this in an environmentwhere we don't have that we don't havethat luxury of what apps script isproviding we have to do a lot more workso we're going to change the statementwe're going to say 10 most recent filesbut I want to do it as a web app that Ican deploy anywhere right and this couldbe on Firebase or AWS or Brazil any weknow picker hosting platform of choiceand since apps script was is Javascriptbased we're going to keep this in thesame family languages we'll just do thisas a client-side web appso architecture is pretty similarum we have users we're going to talk tosome application and that's going totalk to the drive API but we'reintroducing a few new components intothis architecture all right so we haveobviously a server apps script was sortof previously doing this for us it wasour runtime environment now we need ourown it's going to be a server and abrowserand we need some way to recreate whatapps script is doing right so we need toknow uh some way to basically getpermission from the user in order toaccess their their files in Driveand for this number we're going to worka little bit backwards I'm going to juststart just going to run the code we canactually see this doing the exact samething that apps script is doing and thenwe'll we'll deconstruct it a little bitand then kind of see how the the um howit all comes togetheruh so this is uh this code on repl againit's a pure client-side web appand if I click fetch rails we have aslightly different UI just because I hadto you know Implement more of the stuffthat apps script is already providing usGrant access and we're going to Grantaccess to read everything and driveclick continueand we get our file list so exact sameapp in terms of functionality but we'veremoved apps script from the picture andrecreated all of the the infrastructureit was providingand just to show you like the the kindof two important parts uh if you were toyou know look at this code on GitHub alot of this is really just UI relatedcode it's um Simple app using lit uhwhich is great framework for lightweightappsbut the important parts are the fetchfile listwe do have a JavaScript client Librarydecided to keep it limited to just usingthe fetch apis just so that the code isa little bit more verbose and a littlebit more explicit about what's going onbut we're doing pretty much what we weredoing in apps script right so we haveour our parameters to our search we'reusing you know modified time limitingour results to 10.calling the drive API but we're start todiffer as we start introducing some newConcepts right so we have this thingcalled an access token right if I wereto just call the drive API with noauthorization header it wouldn't knowreally anything about that request inorder to answer it right I wouldn't knowwhose files it's listed in whichapplication or anythingso we need some way to communicate thatinformation about the user and theapplication and what it's allowed to doand the way we do that is via thisaccess token and the rest of the rest ofthe code is just error handling andresponse parsingso the question is where do you get thisaccess token from element the simpleanswer is we ask for whatto do thisthis code is using the Google identityServices SDK for JavaScript this is arelatively new library in the lastcouple years it actually makes yougetting all off tokens or access tokenspretty much as simple as you can make ithandles a lot of the plumbing with theUI in terms of doing pop-ups trackingwhether or not the user closed it and soon so really the only bits ofinformation that we need to provide aresomething called a client ID and this iswhat identifies our applicationand we have to describe what data weactually want access to right that's andthat this would be a mechanism we callScopes so in this case I'm just saying Iwant read-only access to everything inDriveum once we do that we have a callbackso once the user you know gives usconsent we get a what we call a Nexustoken we get back an expiration timeGoogle access tokens are limited to onehourand they will actually expireunfortunately the expiration time comesback in the number of seconds remaininguh so we have to do a little bit of datemath in order to convert that into amore usable time stamp that we can checklater onum knowing you know one hour in thefuture at any point is not really usefulbut once you do that we can return theaccess tokenand when we're ready to request we justsay request access token right and thatactually thatcauses the pop-up to appear that we sawwhen we ran the codeupso this is a couple questions like okaywellkind of get access tokens but there's alot more to them uh and also like howyou actually get the client IDs and setup all these projectsand we'll switch over hereI'll just talk a little bit more aboutthoseit says that like access talk isactuallyum they pack a lot of information intothose tokens right they they're not justit's not the equivalent of a passwordthey actually buying three three uhunique pieces of information that weneed in order to answer API requestsright so it's who's the applicationright is thisum you know is this Asana is this uhMiro or you know lucidchart or somethinga script that somebody wrote we didn'tknow who the user is the subjectum sometimes you'll see a subject orprinciple there's a few differentterminologies you'll see when you'relooking at authorization Docs uh butthis is basically who is the user thatthis is bound to right so when Iauthorizedum that created you know this permissionfor this application to run on my behalfand then the last thing we need are theScopes and these are the things that saylike what are we constraining thisapplication to doum and also like I often refer to oauthas not necessarily an authorizationprotocol but a delegation protocolbecause the the permissions that I'mgranting to the app are a subset of thethings I can do I can never Grant theapplication any more access than what II naturally have and my naturalpermissions are going to change overtime independent of when I authorizethat app right so it's always going tobe like what is the current set of filesthat I have access to as opposed to asnapshot of the files at any given pointin timeuh so these are access tokens these arethe the magic keys they're they're alsoconsidered with uh Bearer tokens rightso which means if you have one of theseaccess tokensyou are affected like you can call thoseapis you don't need any other proof ofthat you are authorized other than thatstring that you can pass in anauthorization editor it's one of thereasons why they are time limited justan hour because they are very powerfuluh things to happen so you always wantto make sure that they're transferredover secure channels all the apis onlyexcept uhTLS encrypted traffic and you just wantto make sure that you're not leakingthese in ways that um things like uh putthem in like query parameters or thingsthat might leak in logs or proxies oranything like thatso in order to actuallymake all these requests we've talkedabout a client ID and so how do you getone of these clandities well you startswith Cloud projectsum and for those of you who are in uhkind of the app script world if ifyou've only ever done apps script youmight never have done this but Appsscripts has done it for youum every time there's a new scriptcreated apps script will actually createa gcp projectit will turn on a whole bunch of apis uhfill out a hole in for a bunch ofinformation about your application uhcreate client IDs and it does thatautomatically every time for everyscript that you create so every scriptis its own unique little isolatedapplicationthere are times in apps script or youmight want to do this manually or ifyou're doing without ask script againyou also have to do all this manuallybut the three things that we care aboutfor workspace is turning on apis rightthis is just a signal for quotaenforcement uh things like that just weknow which apis your project is usingfine EDS you can think of these as thecredentials for your application theythink of it it's like a user a usernameand a password for your appuh and then the consent screen isbranding information for when we ask theuser for permission it's how you signaluh to the user who your app is and whythey should trust you all right so itincludes things like your icon your appname uh contact information but alsothings like your terms of service andyour privacy policiesand if you're just building somethingfor yourself or you're buildingsomething for your own organizationobviously a lot of that doesn't reallymatter right like do you care about yourown terms of services are no right it'sjust your code you're going to run itbut if you're if you're bumbling ifyou're a software vendor and you'rebuilding an app for commercial purposesyou're going to have customers then thisstuff starts to matter and we'll talk alittle bit more about what that why itmatters towards the endand so I said you know earlier we kindof looked at this where it's kind oflike like go back to the beginning ofthat process of like how you wouldactually build the app that we startedwith in apps script from scratch if youwere doing it in a different environmentand so it starts with creating a projectdoing your consent screens creating yourclient ID turning on your apis writingyour code for oauth calling your apisand you're done right and then you havea functioning app and you're workingwith like workspace data whichever APIif it's drive or Gmail or calendar itdoesn't really matterum and the kind of the awesome stuffwith apps script is you get to jump tothe front of the line right like you'reyou're skipping you know almost everystep and you're just going to write codeand doneum so I love apps script for that thisdoesn't mean you should all just likejump on apps script and use it foreverything it has its limits um but forjust quick and dirty like I just need todo something with my data and automatesomething it is a really wonderfulsolution that saves a ton a certainimaginable unimaginable amount of timeall right soone of the limit the limitations of ofthat version of the app isthe the the flow that we use to get theaccess token was actually somethingcalled the implicit flow uh and it'sreally really great if you just want anaccess token right awayuh but the problem is that thatapplication only works when the user isusing the applicationand for a lot of use cases that'stotally fine if you're doingum suggesting content to link to aproject right and you just want to showhey here's the most recent files thatyou might want to uh right create a linkfor right totally makes sense to do itin a way where you don't need anythingmore than a short-lived temporary accessbut there's a lot of other cases wherethat's not enough right you're doingbatch processing uh auditing compliancebackups there's a whole a whole world ofuse cases where you need to be able toaccess that data anytime day or nightfor long periods of timeum without having to have the userinteractso there's a different flow and adifferent mechanism in a wallet where wecan we can ask for long-term accessand so we're gonna we're gonna changethat we're going to change our use caseto say well we're gonna instead of justgoing to an app and printing out thelist I want to get an email report andin this code we didn't actuallyimplement the email reports because Idon't want to you know demoing let'swait till Thursday at midnight to get anemail it doesn't make for a great demoso it's going to be the same UI butwe're going to change the structure ofthe app and the code to mirror what wewould do if we need this sort of offlinebatch processingso this is our updated architectureit's pretty similarthe main difference is we're adding aback end right so we need to run code insome secure environment somewhere wherethe user is not going to be involvedum and because we're going to startstoring more information we need adatabase we need to store which usershave signed up what their email addressis and uh store these tokens right weneed we need some you know some way thatwe can call those apis later on andsomeplace to keep themum and before we go into the code uh Ijust want to talk a little bit aboutauthentication becauseumit's a it's a little bit of a weirdtopic to talk to because on one hand ifall you care about isaccess to the workspace datait honestly doesn't really matter howyou choose to authenticate your usersright and you have a ton of optionsright like you know you can do it theway everybody's been doing forsince the beginning of you know computertime and and you know write your ownusername and password management systemand store hashes and you know have youraccount recovery forum I would strongly discourage anyonefrom doing thatum I I would be very happy in for therest of my career if I have neverwritten another login page in my entirelife it is just unnecessary and it comeswith a ton of baggage from uh just asecure security perspective from anoperational perspective there are muchmuch much better options um and I'lltalk about the option that I choose inthis demo I'll talk about why I actuallychose thatummoreum you know more likely what you'regoing to want to adopt is either aFederated approach or usingum something like we call like office ofserviceum so in the Federated approach it couldbe open ID it could be uh you know youcan Google sign in saml if it's in moreof an Enterprise use case is is prettywidely used it doesn't really matterwhich particular one right maybe it'seven just using uh talking to your ldapserverall of those are totally fineum and then if you want to just sort ofoffload a lot of that workuh office of service sometimes thingslike Firebase Cloud identity uh off xerouh Super Bass is another uh similar toFirebase in terms of functionality andthese basically take that vertical sliceof everything around authentication usermanagement recovery Federation workingwith multiple providers and justpackages it up in a way that just makesthings so much easierso for this particular demo that we'lldo next we do need to add authenticationandbecause this particular application isreally only designed to support yourGoogle users I'm going to use Googlesign in which is basically an open IDbased approach and it's just like theleast amount of code that I needed toactually solve this particular problemand that's really the only reason Ichose it right if I needed morefunctionality I probably would havelooked at something like Firebase orCloud identity as a more robust solutionto handling how I authenticate usersall rightso we're gonna go switch to this demolet'syeahso a slightly different experience thistime right so instead of just going tostraight to an authorized uh Or Listfiles button first thing it's going todo this is actually using Google one tapum so this is automatically as soon asthe user hits the page it's going to askfor like hey we see your Google user uhdo you want to sign it right and it's aextremely expedited flow it doesn'tshare any information with theapplication other than basically mybasic profile informationand once I give it consentthat code's going to sign me in it'sgoing to create a session like we woulddo for just about any web app regardlessof what authentication method we choseand also change the UI a little bit inthis case so we have two buttons nowright instead of just one button thatdoes everything I'm going to split theauthorizationthis is exactly the same as what we sawbeforethe difference is the when we look atthe code the actual mechanism for howthis is all working is a little bitdifferentso once you're ground we can hit fetchfiles and same thing as before so sameapplication same functionality the maindifference that we added this time is weadded authentication so we know who theuser isum and we implemented a different adifferent authorization flow for oauththat gives the application long-livedaccess so I can come back inyou know come back tomorrow hit the listfiles and it's just gonna work I don'thave to give consent again so long asI'm logged in and knows who I am and itcan get my tokens like it will work andit will keep working indefinitely untilme as a user decides I want to revokeaccess and there's ways you can do thatin your uh Google account security pagebut now like this this can send meemails you know every day or every weekwhatever my schedule is and I don't haveto think about it or worry about itso on the so there's a couple bits Iwant to take a look atum take a look at sign inso the nice thing is Google sign in andsince it is based on oauth it's theexact same all the setup that we did forsetting up our client ID for oauthfilling out our consent screen all ofthat just automatically carries overit's the same quantity as the sameapplication I don't need to do reallyany other additional work other thanuh asking using a different methodbasically to say like well like can youlog in the userso um where we had this like tokenclient before we have we could sayGoogle accounts ID prompt and that'sjust asking the user hey like log inthis user let me know when you're doneand what we get back is what we call a ajot it's a Json web token uh and whatthis is is just a little blob of Jsonthat has profile information about theuser uh it's signed uh verifiable andwe'll take a look at that code of whatthat looks like but without having toknow the user's password or reallyanything about them like the app canjust get this verifiable token and thenconvert that into whatever credentialformat it needs internally right maybeyou can use a jaw as a session token inthis case I'm just using cookies in myown session we have a lot of differentoptions for how this all worksum the[Music]let's go with you[Applause]there we goyeah so this is basically theverification foruh when we get that job we're just gonnathis is the back end code now this isnot client side this is uh just aexpress.js uh route Handlerso when a user signs in and we get thatjob there are some things that we haveto do from a security perspective we'lltalk about that in a little bitum after thisumbut hopefully things like like uhcross-site request forgery preventionsare hopefully familiar topics uh if notwe can talk about them happy to answerquestions but we're just using the thethis is the uh node.js off Library uhfor our API clients it actually has abuilt-in method for verifying the tokenso I don't really have to give it muchother than the token itself and ourclient ID right and that's actuallyreally important for uh making sure thatattackers don't give us like you knowdon't mint their own job for their ownapp and like try to you know confuse wholike well yeah just because I signedinto that hey it doesn't mean I can signin for app B so that's really the bareminimum of what you do the library doesa lot of other checks in terms ofchecking expiration times checking thevalidity of the signature so most of thetime you don't really have to get intoany of the nuances of like how dots workor the encryption or uh assigningmethods or anything like that just usethe libraries they work great they'll dothe checks and make your life just a loteasierand then once we do that we have youknow we have some information so in thiscase it's uh subject is user ID we havethe email name and and Avatar Photo fromGoogle and we can use that to just makethe app look nicefor authorizationvery similarit's actually very similar to what wesaw beforeand but instead of calling this in atoken client we're calling it code planand this just is an instruction to thelibrary that we want we want along-lived uh Grant and a Long Livetoken that we can use for appindefinitelythe the difference in these flows likefrom a UI perspective almostindistinguishable right and just doingthat demo you couldn't really tell whichflow was was whichfrom an implementation perspective thedifference is that instead of getting anaccess token back that we can useimmediatelyif we get back an intermediate value Iget this uh what they call anauthorization codeand what we need to do with that code isthen send it to our backend send it to amore secure environment where we canthen turn around and exchange that forboth an access token and this new typeof token uh which we haven't seen yetwhich is called a refresh token and thatrefresh token is the thing that we needto save right that's the thing that wecan indefinitely every time we need anew access token you need to call an APIwe can take that refresh tokenand ask Google give me an updated accesstoken that I could use right now andthere's a little bit more securityaround that part of the reason why youhave this a little bit of an extrabalance in how this is all this allworksbut really the code is almost the sameuh we just uh as soon as we get thatcode we're just going to forward it toour back end and then process it thereso you can actually see what thatback-end code looks like it's that thisexchange code methodum so other than doing uh some you knowrequest ordering protections we're justgoing to use the client Library justlike we did before for verifying the jotwe're going to give it our client ID andclient secret which we get from our gcpprojectand then we exchange that for our tokensand then once we once you have thesetokens because these are long then wewant to hold on to them this is why weneed our our sign in and our database wewant to just make sure that we savethose credentials in a way that we canyou know associate them with the user ina secure waybut once we've done that we're good likewe can now call apis forum anytime we want for that user untilour access is revokeduh and our list files method is actuallypretty similar instead of umwe've moved this to the back end allright so we're not running in the clientanymore uh we just haveum similarly we're just going to liketake loader credentials from thedatabasewe're gonna check to see if our accesstoken is expiredum again these do expire every hour ifit is expired we just need tocall this refresh access token right andso long as we're providing in our youknow valid client ID and secret and soonwe can just keep doing this anytime wewant once we have that you know we canit's an optimization to like re-save thecredentials and re-save the updatedaccess token uh but then after that thecode for calling the drive API isexactly what we had on the client sideparameters call it past the otherauthorization header with the token andwe're done and so it's almost the samething we just saw a slightly differentway of getting those tokensum and and that's itbut before we move on to like the nextthe the final use case um I wanted Iwant to talk a little bit more about uhsecurityum and so you saw like hints of that inthe code you saw some um cross-siterequest forgery uh protections there's anumber of ways that you can go aboutum protecting this summer very simplesome you know a little bit more uh alittle bit more secure but a little bitharder to implementbut when you have offline access likeyour app has a lot more capabilitiesright an access token on the client thatexpires in an hour if it yes it's bad ifit leaksum but it's not the end of the worldlike that token will naturally expireand become useless you know within youknow 60 Minutes you still want toprotect them as best you canbut a refresh token lives indefinitelyall right so like if if that leaks ifthat and your client ID and clientsecret are exposed right well now now anattacker has they can do a lot moredamageumand they're also that because of thedifferences in the protocol there'sactually some really uh unique attacksthat uh attackers can do with uhbasically unsolicited requests rightwhere I can take um begin theauthorization process for an account Icontrol and then trick you intocompleting it and Associate and linkingthat with your account and so most ofthe most of the uh the countermeasuresthat you see uh recommended with oauthare really around making sure that theperson who requests access is the sameperson who you're actually like like youwant to make sure there's continuitythroughout that entire floodum and you know not letting people likeyou know start on one device completeanother because those are generallygoing to be attacksum good news is there most they'reactually really simple to implement umthe majority of them are if you built aweb app and you've dealt with uhprostate request forgerysame defenses that you would use forprotecting a form you would use forprotecting your sign-in and your oauthflows uh there are some uh oauthspecific mechanisms that use in specificin certain use casesfor sign in uh just making sure youvalidate jots correctly there wasactually a somewhat Infamousvulnerability that came up not too longagoum where some libraries allow itundesigned jobs by default so you canjust make up anything you wantum that's a pretty bad role in ourability if you can letthen attacker just be any user at anytimeum first a lot of things are fixed anddevelop behaviors were pretty good andthen obviously you want to protectsecrets and so on uh I do have a link touh there's an RFC on oauth securitythreats encounter measures again youdon't have to be an expert you don'thave to read through all of itbut it is actually really interesting ifyou like security it's reallyinteresting reading to see why theprotocols work the way they do and whythe recommendations are what they arebut when it comes down to implementingyou don't really have to do a lot youjust have to make sure you doyou know at least the things that are uhstrongly recommended by any providerthat you work with[Applause]all right so we're gonna we're gonna doone last uh variation on this and thisis more for uh we're gonna get into likemore of the Enterprise use caseso like it's great you know we have anapp users can sign up they can get theirreports but now as you know somebody init and I have to manage clients for myorg I want to get you know whateverreport we're generating I want to dothis for every user in my work all rightand well yes we could have them all goto the app and log in and sign up andgive accessbut once you get aboveprobably a pretty small number of usersthat becomes uh just impractical rightand certainly if you're an oracle ofthousands to descendants tens ofthousands of users like it's it's notyou can't even have that conversation atall right so for somebody if you'recoming that's from an I.T perspectiveright you need a way to be able to Grantyour apps uh and make these uh thesedecisions on behalf of all your userswithout having them in the pictureso we're gonna have a slightly uh andwe're actually a slightly simplerarchitecture than we had for the for theother appum kind of back to almost what it lookslike with that script where we have anadmin is gonna we're gonna run somescript is going to talk to drive apisbut the part that we're adding is thisthis out of bandum it's not a band process between thead you know the IC admin or you knowsomebody who's privileged enough to makethese decisionsum and then granting our app access viathe uh the the Management console forGoogle workspaceumso what this allows you to do is thatand and before where we had client IDswe're going to use a slightly differentmechanism that is probably more familiarif uh are there like people who use gcpokay so probably like have dealt withservice counts right like so you haveservice accounts and that's kind of theprimary way for uh for gcp to use uh todo authentication right and it's justidentifying who your application is verysimilar to what we use client IDs for inoauth it's just a stronger uh way ofauthenticating right public private Keysinstead of just a simple symmetric keyuh so we're actually going to leverageuh service accounts and Grant thatservice account the ability toimpersonate all of our users in ourorganizationahand just because I didn't want to have auh an unsecure service account withimpersonation abilities running onuh on Ripple it uh I did wrap this inGoogle sign-in just tomake sure that uh nobody else is goingto like just hit this app and you knowactually log in and try to first I needall my test usersumso it is guarded but we don't have theauthorization button anymore I can justlist files and the way this is thisworks is you know as an admin Ipreviously authorized this app to act asany user so if I were to log in asanother test user who's never eventouched that beforeas soon as I sign in and hit list filesit's going to work no permissions areneeded because the admin has alreadymade that decisionfrom a code perspective it's actuallypretty simpleright we use our drop clientand we just add a couple extra claims wesay uh the Scopes that we want and weget give it a subject and that that jotthe same draws that we use for identityfor Google sign-in we can exchange thatmuch in the same way that we exchangethe authorization code in the previousexample right so we just say like you'regoing to a Google identity the GoogleAccount Services we say hey like on thisapp I want to act as this user doing thescope give me an Access token and ifthat Grant exists if the admin wentthrough the proper steps you get back inAccess token and then you can startusing apis just as if the user wentthrough the oauth flow themselves you'rejust short-circuiting that entireprocess[Applause]there are a couple different variationsfor how domain-wide delegation Worksdepending on how you're using serviceaccounts in this particular case I'musing um a private key that I downloadedright so I can I can sign that I cancreate the drop locally sign it andexchange it entirely within theapplication if you're running on gcp ifyou're running a cloud run or Cloudfunctions a lot of times you don't havethe private key right it's actuallysomewhat discouraged actually downloadthe private Keys these daysum and so you have an alternative whereyou can actually do a remotely signed uhjob so we have an API that aren'tactually just called sign jotappropriately named part of the iam apisum and so long as you have the serviceaccount token Creator rule you can callthe API with the payload that you wantsigned it will sign it and then you goaround and exchange that for an accesstoken for that useryour mileage for how easy that is in anyparticular language depends on theclient libraries some of them make itreally easy there are a handful of thethe client libraries where thatparticular version of the flow is notvery well implemented so you might haveto do a little bit of a little bit ofthe work thathidden in the node.js version you mighthave to sort of break those steps apartand um you know handle the exchangeyourselfso like the we looked at like fourdifferent scenarios for thisum and really like the thethere's a whole bunch of scenarios thatwe didn't even talk about right likethere's a lot of this is going to varydepending on if you're building a mobileapplication right like the flu is onAndroid are a little bit different thanthey are on iOS versus a web app ifyou're building a desktop app right ifit's a command line versus like orsomething built with electron all ofthese things are going to have slightlydifferent variations to how they're doneright but they all fit Within Thesebucketsum you know to some extentbut the main the main point is likehow difficult oauth is going to be andhow much work you have to pay inattention to security is really dictatedby your use case uh and really the thingis just to dois it's be lazy right like that that ismy recommendation it's like really onlydo as much as you actually need for theproblem you're trying to solve right andthat's usually the where I seedevelopers get tripped up is they uhvery often will jump to the the mostcomplicated way of doing oauthum when really what they need is is muchmuch simplerand you know so you know depending onwhat you need to do like you know ifyou're just tinkering around do appsscript apps script is super awesome fora quick hackum if you're building a commercial uhapplication you're going to sell it tolots of customers and you need to scaleyou're probably gonna do something withimplicit or code flow rightum I would not recommend domain-widedelegation for you know multiplecustomers it's just a lot of securityriskum you know those are really onlyfocused for internal cases but reallymost of the applications are going to bekind of in the middle and it justdepends on do you need offline access ordo you need uh if it's only for when theuser is presentbut you know that's that's really thethe main takeaway it's just you know dodo the least amount of work recommendedright like that that's itumso one last thing I want to talk aboutum we've got about two minutes left isuh sort of the elephant in the room withoauth and I don't know how many peoplehave actually gone through this processbeforeum but there is an improval process foroauthand your experience with that processcan verywildly depending on a bunch of differentfactors so the good news is if you'rejust building something for your own oryou're building something for yourselfit's easy right there's no processthere's no approval it's your data dowith it what you want and nobody caresif you're building something for otherusers you're going to sell it tocustomers or consumer accounts orschools or whatever then it becomes arisk-based process right if you're justdoing sign in and all you want to knowis who the user is it's usually prettyeasy two three days uh really they'reonly looking at your brandinginformation do you have a reasonableterms of service privacy policy and soon and again usually turn around into acouple daysif you're requesting data accessthen that's going to depend on how muchdata you're asking for right so if youwant access to just a little bit ofinformation in workspace you might getby with a self-assessmentum running some automated security toolsjust to structure to check the thingsare okayumbut if you're asking for like fullaccess to everything in uh in drive andyou have a huge customer base right wellthat process might start to involve athird-party security audit and thetimelines can actually be on the orderof several weeks to a month or twoumthe point of this isn't just scary andsay like oh like this is this reallycrazy process that I have to navigateit's really not that bad and the processhas improved a lot over the last coupleyears it's really just to make sure thatyou plan for it right and so like ifthere's like three three lessons fromany of this it's like understand youruse case and be lazyum security matters but you don't haveto be an expert and just plan for theprocess right um most of the escalationsI see like that come my way frompartners and so on is are really justthatnobody planned for the the approvalprocess and so it's they're like heywe're gonna launch on this date and theyjust submitted their route two daysbefore their launch andyou know then they get a whole bunch offeedback that's going to take them fourmonths to fix right and like that is nota situation anyone wants to be inum but if you you know sort ofunderstand the requirements early youplan for the reviews you plan for doingthe security analysis it's actually it'sa pretty manageable process you knowpretty much every developer ever workedthrough has successfully made it throughright so like don't be scared just planso that's all I have just a couple ofthings uh last resources I certainlyencourage everyone to check out uh inthe innovators Hive area we haveum the entire workspace developerrelations team we're happy to chatanswer whatever questions or just learnabout what you're doing a whole bunch ofother sessions a lot of these havealready happened but you can check themout onlineuh you could also sign up for ournewsletter it's a Once once a month uhnewsletter you can sign up for we justgive you kind of what's new andnoteworthy with any workspace apisand of course you can follow us onLinkedIn and Twitter and and so onand of course as always any feedbackthat you have on the session certainlyuh happy to have that it would just helpus make sure that we give the contentthat you need for future eventsand that's it that is all I have and I'mhappy to answer questions or chat withpeople in the hive sectionum you know for the rest of the day ortomorrow so thank you very much[Applause]"
}
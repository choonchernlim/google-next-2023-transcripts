{
    "title": "Cloud Run, Firestore, and Firebase: Serverless at your service",
    "presentation_type": "Startup Lounge Session",
    "categories": [
        "AI and ML",
        "SU111"
    ],
    "video_id": "JOvDPNVKwqI",
    "time": "Aug 29 06:30 PM - 07:00 PM CDT",
    "transcript": "foreign[Music]hi everyonethank you for coming to Cloud next thisis this session is cloud run firestoreand Firebase serverless At Your Servicenow the English expression to be at yourservice means to provide help wheneverneeded and serverless is here to helpyour product be successfulI am Sarah Ford I'm a developerrelations engineer on the serverlessteamand I will be joined by Sylvester mainwho is a cloud of run customer atorderly healthso in this talk you're going to learnabout Cloud run which is Google Cloud'seasiest and most convenient place to runback-end code written in any languageand you will see in the demos how Cloudrun and Firebase work great togethernow Cloud run is designed for scale withcost efficiency in mind which we'll seethroughout this talk and lastly you'llsee a few demos including Cloud run jobswhich is you could think of claveringjobs as cron jobs for the cloud and alsoyou'll hear Sylvester's customer storyso Firebase is Google's app developmentplatform for web mobile and game appsand it is awesomewith Firebase you get a Firebase hostingyou get manage user authentication andyou get a nosql database calledfirestore because you don't know whatthe seek the schema is going to looklike tomorrow much less in a few hoursso as you grow you're going to want yourown you want Dynamic websites you'regoing to want your own apis you're goingto want Ai and ml services but you don'twant to manage all that growinginfrastructure you have things to do soin this talk you'll see how Firebase andCloud run work great togethernow with serverless you're not managingphysical servers but you find yourselfnow managing scalingwhen you go to serverlessyou'll find thatyou'll get to focus on what's core toyour business which is app yourapplication development and withserverless you get performancemonitoring Straight Out of the Boxhere's a different way to look atserverless so this is a Google Cloudcustomers uh website the traffic fromthis from this customer's website usedwith permission and here it's a you cansee the consumer traffic it it comes inhighs and lows it's for it's wavy itcomes in bursts right so if you want tobe able to handle this traffic you haveto open provision the areas in the darkblue to be able to handle that thattrafficbut what if a famous uh influencermentions your site you you don't wantthose uh that traffic to you know thosecustomers that have a bad experiencebut you also don't want to overprovision because that's not fun eitheryou're having to pay for all that darkblue areascaling can be challenging if you wantit to be cost efficient because you haveto make sure capacity closely tracks thedemandor you could let serverless handle Autoscaling for you and to use a calculusanalogy because you cannot have a Googletalk without a math jokeyou think of serverless as paying forthe area under the Curveso with Cloud run you get to runcontainers in the fully managedenvironment you get an HTTP endpointincluding load balancing out of the boxand Clause 1 implements K native soanything that you can put into acontainer you can run on cloud runand lastly there is no clustermanagement so no manually managingscaling up and downnow although Cloud run is offering allthis doing all this Auto scaling for youthere's additional fine tuning you cando as well in case you even know of likea particular Black Friday Cyber Mondayhigh traffic spiky type of traffic eventor you have certain workloadsand one of those functioning is minimuminstances so let's say that you scalethat zero so you have no traffic herebecause if you're paying for what you'reusing you're paying us you're paying forwhat you use and then traffic comes toyour Cloud run service so Cloud one isgoing to spin up an instance andcloudman will keep that instance warmfor 15 minutes for freeand then scale back down if there's notraffic within that time frame but let'ssay you know there's something aroundthe corner there's going to be a hightraffic event you can set a minimumnumber of instances warm to handle thattraffic they will not scale downand I want to be clear on terminologywith the cloud run defines concurrencyas the number of requests a singleinstance can handle at any given time bydefault clavron sets this to 80. you canconfigure this as neededall right let's talk about billing sowith Cloud run for billing you pay forthe CPU and memory that you use you donot pay for the number of requests thatyou handle and you do not pay when theinstance is kept uh idle as we mentionedin that 15 minutes uh in that 15-minutestate so you're paid for the so here inthe blue the two blue bars I overlappedyou see that you're paid for thecombination of those two requests forthe CPU and memory that you use combinedand also let's call out uh in the bottomof the chart the CPU always allocated sowhen an I when an instance is idle inthat state where uh it's being kept oneway and just to see with them up to 15minutes and more traffic is going tocome in before a spell scaled down Cloudon will reduce the CPU to conserveresourcesbut if you know I need this Ray to go atall times to CPU you can also enablethatthe CPU always allocatedso for the first demo we're going totalk about you're going to see how youcan use minimum instances to keeptraffic ready to go but let's do a slideoverview illustration firstall right so let's talk about what acool start is let's say that you'restarting up your service there's certainthings you want to do in thisutilization time like connect to adatabase or maybe you have a acomputational heavy method that you wantto Cache that result you don't want todo that every single time a requestcomes in you want to Cache that andreuse that that's yeah when possible sowe're going to refer to that as a quotecold start butonce the instance is warm any request togo to that instance up to 15 minutes canreuse that connection or reuse thatcache databut again if you know of a Black FridayCyber Monday event around the corner youcan just set minimum instances to beavailable and here upset 2 minimuminstances as you'll see in the demo thatare ready to go so they're not going toscale down even after 15 minutes even ifthere's no trafficall right so it's demos all rightso the first demo you're going to see ishow Cloud run does automatic Autoscaling and also you'll see minimuminstances then you'll see how cloudronand fires are the nosql database worksgreat together with auto scaling andthen lastly you'll see uh Cloud run jobslet's say like you just have a task or ajob you want to run you don't need tohandle like HTTP requests you just wantto run a task or a jobyou'll see how you can do that withCloud run jobsand I have these sorts of videos if youcome to the Innovation Hive uh Booth I'mhappy to pull out the laptop and showyou these on on my laptop as welland let me skip the first video goingall rightOkay soin this first video you're going to inthis first demo you're going to seehow I have a computational heavy methodand it's going to Cache it it's going totake five seconds to to run so you'regoing to see how you can use minimuminstances to reduce that latency byreusing it in futurerequests that come in I'm using golaying or using go language just to showthat if you can put it in a containeryou can run it in Cloud run and then uhyeah I'm catching that in global scopeand also I'm using main which just goesumanything that's in Maine is going to beinitialized in that cold startso here in the hello world uh requestHandler I am calling the heavy uh thecomputational heavy method I'm usinglazy initialization which means I'm onlycalled a method if and when I need toand notice the Emojis I have a cold Ihave a warm emojis throughout this demoyou'll see that in laterand then lastly to simulate a heavycomputational method I'm just doing afive second sleepall right I'm going to use gcloud rundeploy command but notice that there'sno Docker file on the uhin the in the in the filesthis is because I'm going to let Cloudrun use build packs to build thecontainer based on the source code thatI have available and buildpax implementsthe cloud native build packspecification so I tell cloudron Cloudrun deploy command where's my source isin the local current directory indicatedby dot then I'll call this demo onescale from zero because we're justthrowing the service up using thedefaults and then it says allowunauthenticated invocations so I'm goingto say yes to mimic a public facing APIand now it's starting to build acontainerand I'm going to fast forward a coupleminutesand now now that my container or myservice is running I have a service URLat the bottom and I'm going to sendtraffic to it using an open source toolcalled Hey for just for a low generationI'm going to send 10 000 requests 100 ata timeso this is hey it's only 10 000 requests100 at a time but remember on the cloudrun side it can handle up to 80 by or 80by default for each instance now it'sgoing to take up at least five secondsbecause of that cool startbecause of that uh initial like that thefirst time we were calling thatcomputational heavy method and we couldsee that too in the histogramum we actually see it 100 requests weresent to code starts or affected by Coldstarts it has a time of 6.5 secondsevery other time I've done this video Igot 5.5 seconds this time when Irecorded I got 6.5 I think it's becauseI was recording from home and myinternet service provider was a bitslower and also I'm not using my laptophere I was using my laptop to record sowhatever might have been happening alsoin the laptop side too not a truebenchmarking to us but you get the ideaall the other requests indicated by Pthe P95 is0.0881 whereas P99 is 6.1okay so now in those instances it's warmI'm going to send it the same amount oftraffic 10 000 requires 100 at the timesame endpoint NOW Watch What Happenslet's take a peek at the pay attentionto that P99 value now we see the slowestrequest was 0.27andthe P99 time was oops let me back up twoseconds uh maybe two more seconds wehave P99 was 0.1131 seconds because itgot to reuse no one had a cold startthey all got to use that cash valuebecause the instance was kept onebut again and then here I'm in the cloudrun service I refresh I see the new oneI just deployedand if I go to the logs I mentioned theEmojiI am a big fan of emoji drivendevelopment so here we're going tofilter by cold start or by cold oh andnothing like showing your frequentlyused emojis you know in a recording onstage on nextand here we see three instances so wehad three cold starts so we spun upCloud one spun up three and just forcompleteness I wanted to show those 100requests that were affected by thosecold starts by using a warm emojiyeah Emoji driven development is fun allright but now I mentionedif you know that there's going to besomething around the corner you can setminimum instances so here I have it setto twoand I'm going to sendum yeah I'm just copying copying thecloud run service URL and then I'm goingto Arrow up delete the old uh the firstcall run URL I'm going to replace itwith the minimum instances Cloud runservice URL and blast it again 10 000requests 100 at a time and again payattention to pin 99 value everything'swarm because I kept them warm and herewe seethat if P99 was 0.18 andit's going to back up two seconds toshow one thing I try to remember to saythis is important notice that it saidfour hours agoso that it was not within that 15 minutethis is this was kept um worn for awhilejumpback inall right what a lot about 10 minutes goby because I wanted to show you thedashboards so this is the first servicethe scale from zero where we justdeployed a new container you see that itspun up the three cool Stars we saw thatwith the cold emoji and then you can seethe grab of idle how it's goingthey're spinning down because there wasno traffic within that 15 minute timeframe but check out what happens withininstances we see that two and crustswere kept idle until it got traffic itgot blasted by that hay traffic and thenyou see that is switch oops and then itswitched to um activeso does demo one using Min instancesall right so demo two what I you'regoing to see is how you can usefirestore to automatically scale withCloud run so what I did at the firestoreis I took my computational heavy methodI ripped all that code out and replacedit with a query to firestoreand then the bottom corner it says thatit has one one hundred thousand or oneone hundred thousand threeuh um Rose to a collection calledemployeesso again I'm using this pretty much thesame code but in main I'm initializingthe connection to the database because Idon't need each request Handler doingits own connectionand thenhere I am querying all the employees inthat 100 000 row collection that arefrom New Orleans or New Orleans or NewOrleans I can do that all day and yeahhow many other employees are from thereso each request is going to do thatquery to 100 000 rowsand in the interest of time I'm going tojust skip ahead from the gcloud we're ondeploy you've seen that now so I'm stillusing the defaults I just want to showthe default out of box behavior and I'mgoing to send again I just like thesenumbers 10 000 requests 100 at a timeand then I'm going to use that uhnew Cloud run URL or Cloud run serviceURLso each request is going to do thatqueryand here's the next room is gettingexcited tooand we see that P99 is 0.4288so the only customization the onlychange I made to firestore was justtweaking the production rules forrewrite for or tweaking the rules forrewrite to a production database that'sthe only everything else is out of theboxand then the final demois Claiborne jobsso let's say you don't need like let'ssay like you just have a task or a jobthat you want to run to completionyou can see that the last entry isAugust 7th and I just want to see howmany new employees joined last week thistime there's no entry Handler there'severything is in Maine because we'rejust going to query the database fromstart to endhere I'm just want to say hey give meall the employees to joined last weekand this time is doing gcloud run deployI'm going to say gcloud run jobs deploybecause this is a jobI give it as a source locationa given the name demo three but noticethat there was no prompt forunauthenticated invocations becauseyou're not handling requests you're justrunning the joband now that is I can say gcloud runjobs execute and then the name of myserver my joband so it's running now and it'squerying to find out all the employeesand it's actually writing it into thatweekly report so here we can see August14th has 140 you you uh user or newemployees was updated and I can go tothis link in the terminalto go straight to the cloud run jobspage for that uh for that job noticethat it says tax zero I could also dobatch processing and have multiple taskshere I only use one it has zero but oneof the things that's also awesome abouttasks and collabor and jobs is that youcan have long running jobs you can havejobs that run for 24 hours so each taskcan go up to 24 hoursand then each task has its own logs justagain for completeness the engineeringme you see they logged 140 new employeesjust like in the database and thenlastly I'll show you the uh the con partof crime jobs for the cloud I can use uhyou can use a cloud scheduler toschedule thisand I'm going to put it every Sundaynight at 11 59 pm to trigger This Cloudrun jobso that concludes demo three Cloud runjobs cron jobs for the cloud and now I'mgoing to invite Sylvester on stage[Applause]all righthi I'm Sylvester an engineer at orderlyHealthwhere we have been working to create themost accurate view of Provider datapossibleorderly Health has a variety of productsavailable that help youassess your data needs help you automateyour ingestion and ingestion enhanceyour data or we could help you buildyour own provider directory and manageitbut how do we do thisserverlessso our history is basically a story ofhow businessuse serverless Technologies to buildadapt and scaleover time we use cloud functions to getideas out quickly we use cloud run toconsolidate things when it wasconvenient and we use bigquery to pushdown our workloads so we didn't have tomanage all of that spark infrastructureand things like that you normally do inETL processesso here's the storyin the beginning there was Seanand some data scientistsand they follow the normal route to grabdata from here and there they saved itall over the place on their laptops andthey manually toil to get the data setsbuilt that served our customersand it worked and the customers werehappy but if anyone ever asks oh how didyou go from input X to Output Y at timeZ you had to go spelunking throughrandom data science notebooks andlaptops and folders and it wasn't funso we hired some Engineers to automateSeanthe first thing we did was we took allthe data and we pushed it up into thecloud in the g into a Google cloudstorage and set up some standard rulesfor all right this is how you name yourbuckets and paths so everyone's on thesame pageand then we did the same thing on cloudSQLthat worked with the data in the cloudbacked up resilient and accessible byeverybody and consistent we were able tonow focus on automating the ETLprocesses that we had goingum but we overshot a little bit wefocused on building software instead ofpipelines and what we ended up buildingwas like this complicated bespoke thingwhere we were building our ownFrameworks and stuff like that and itmade it difficult to enhance and todebug and to expand so we had to take astep back and think likewhat are we doingare we in the business of making data orReinventing the clouddataso we took that that system that we hadbuilt we didn't throw it out we took allthe lessons that we learned and the andthe good processes that we figured outand started to think how can we simplifythisone of the first things we did was wewent from ETL to eltso we could get all the data into thesystem by a simple means it's necessaryand we sunk it into our data warehousewhich was bigquery which like I said iswas useful because I didn't have tomanage my own Warehouse or build itmyself from scratch and then we with allthe data in one place we could start toingest it and process it and start todevelop our in-house methodology ouralgorithms that we use to form that bestview of the worldof the provider of data worldand once we had that and we wanted toserve the data to our customers wecached it all over in elasticsearch thatallowed us toto back our apis with a simplesearchable interface and then we justspun up a endpointby a simple means necessary which Cloudfunctions allowed us to doover time we started realizingeverything's datatherefore everything's a data pipelinethereforeyou know the same practices foringestion or outjestion and themethodology they're all similar so wewere able to automate all the thingsand actually we were able to consolidatesome of the practices to go fasterat this point in time we had a prettythin method for doing our elt ouringestion our digestion all the thingsyou'd want to do when you're dealingwith data which iskind of a big deal hereumand we started expanding our offeringsonce those expanded our endpointsstarted toto expand as well and at that point wetook a step back and said wellthere's a lot of replication here likewe're duplicating logic so we could weshould start to consolidate this somehowwe thought well we could extractcommonalities put it into libraries butthen we'd have to inherit the overheadof managers CID CI CD systems pip reposthe life cycles of those thingsor we could go the lazy the efficientroute and consolidate it into oneserviceso we did that we Consolidated it intoone service so that all the common codewas there everything else sat on top ofit and it was pretty easy to do becauseyou know Cloud functions are basicallywell we're using python it's essentiallylikea single flask endpoint running on topof Cloud run under the hood anyways sothe consolidation was trivial same codeless of itso yeahessentiallyour story was a history of buildingadapting and scaling and using serviceTechnologies allowed us to do thatbecause we didn't have to to manage theinfrastructure the scaling the the allthe things all the things you get with aserverless solutionyou know Cloud functions allowed us tospend get our ideas out quicklyCloud run let us consolidate or runbigger jobsbigquery became our Workhorse for ourdata transformation loads and thingslike thatsoyeah that worked outsince the beginningGoogle was with us helping us out viathe startup Google for startup Cloudprogramtheir credits allowed us to focus onbuilding instead of worrying aboutsoftware costswe had experts there to answer questionsfor usandwhenever we had a problem or an idea wehad people to spitball with and theywould they would give suggestions whichwas really helpful and we also got a fewsneak peeks which was nicesoI'm going to hand this back to Sarahif you want more information about thatprogram you can scan the QR codethank you[Applause]okay so what's next if you're interestedin club run or Claver and Joss we havequick startsand if you're already in the Firebaseecosystem and you want to try out Cloudrun Firebase has stocks specifically forserverless for cloud functions and Cloudrun and there's also some other talks aswell at Cloud nextokay again takeaways uh Cloud run isdesigned for scale uh with costefficiency it's my in mind and you alsoget additional uh fine-tuningum Cloud Runner is great firestore isgreat but you know what's bettertogether cloud cloud run and firestoreall right Firebase and then also uhcollar and jobs is John uh Crown Clubroom jobs is cron jobs for the cloud andremember up to 24 hours processing timeagain your feedback is appreciated uhplease uh if you haven't alreadydownload the app let us know yourfeedback and thank youforeign"
}
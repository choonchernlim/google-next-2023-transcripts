{
    "title": "Five (and a half) actions you can take to mitigate software supply chain threats",
    "presentation_type": "Breakout",
    "categories": [
        "Security Professionals",
        "SEC205"
    ],
    "video_id": "RSSnmVszodQ",
    "time": "Aug 30 03:00 PM - 03:45 PM CDT",
    "transcript": "foreign[Music]welcome to SEC 205 five and a halfthings and actions you can take tomitigate software supply chain risk andthreats I'm Andy Chang one of theproduct management leads in Cloudsecurity focused on software supplychain I'm joined here by Aaron helloeveryone Aaron Adelman I'm a developerrelations engineer focused on cloudoperations and securityand today we're going to walk youthrough a few things split between thetwo of us we'll talk a little bit aboutthe context of why software supply chainis increasingly important something youguys now to think about in an expandupon Beyond traditional app securitythe actual threat landscape which Aaronwill cover we'll cover those five and ahalf things with Aaron taking the firsthalf and me taking the the second halfof things and we'll talk to you aboutassured open source which is one of thefirst initiatives Google has from aproduct standpoint to help you guys yourlife make your lives a little bitsimplerso we'll start off with uh kind of aninteresting concept today whether youknow it or not you're a software companyyou depend more and more on software todeliver value to your customers as aresult of that you're subject to a lotof the risks that exist in the wholesupply chain leading up to that softwareand tell you more about the risklandscape and turn it over to Aaronthank you for that Andyso it's interesting withrisks that are specific in the supplychain a lot of these threats are goingto look familiar but the aspect isslightly different because it'shappening at a different stageand why does this matter to you you knowI had a chance to see some of thedifferent industries that arerepresented today and not all of themwould say we are primarily applicationdevelopers we have everything frommanufacturing to National Security sowhy does this actually matter to all ofus because today we're at the end of thesupply chain at the very least rightwe're consumers and very often we'reconsumers of Open Source softwarenow Google anticipated that there wouldbe an issue with this for over a decadeand we've taken a lot of steps to refineour process our mitigations and we wantto share some of that with you tooin mandian M Trends we've seen that 17percent of breaches start with a supplychain attack and that it is now thenumber two initial infection Factornow analysts think that within the nexttwo years nearly half of companies aregoing to experience a supply chainattackand because of that there has been a lotof response from governments andRegulators to improve how we havevisibility and preemptive action intopreventing these attacksI also want you to take a look at howthese attacks are changing becoming moresophisticated there's more of anexpression of creativity in them forexample with 3cx the threat actor wasable to chain together multiplecompromisesand then with Pi Pi they deliberatelyoverwhelmed maintainers with maliciouspackages to the point that themaintainers were not able to respond intimeso because of this I want us to think ofsupply chain security as much more thanjust accidents being introduced thetypical dependency management withaccidental vulnerabilities either fromopen source packages or from our owndevelopers instead we need to take amore adversarial perspective here weneed to think there are people who aregoing to deceive to take advantage ofhow we operate to get things in earlybecause it's easier at that pointand so just to look at this landscapeand see you know a stoic exercise what'sunder our control and what's outside ofour control well under our control wehave our own pipeline all the singlesteps in our build processand because of that we need to check theIntegrity of the artifact at everysingle point not just from Source inruntime we need to look in between am Ipulling the right package am I releasingthe right package right every singlestep we need to scrutinizeand runtime Security will still berelevant but it's not the only thingso we need to think also about thethings that are less under our controlright our dependencies nowfor every single dependency you bring inyou may bring in 70 to 80 transitivedependencies so really think about thatfor the one or two people talking onstage there's a whole audience you know70 to 100 people right same thing withyour dependenciesso think about the visibility issuesthat come up here every single one ofthese dependencies also has a pipelinethat's also susceptible even if Sourcehas the right scrutiny and even ifruntime has the right scrutiny there'sall these steps in between that we'll gointo where things can go wrongand just to hear both what we've heardfrom Mandan and also directly from ourcustomers about the pain points aroundthis we see that there is a 7x increasein open source supply chain attacks andlikewise that 85 percent ofvulnerabilities are in these transitivedependenciesand I mentioned earlier that by 2025nearly half of organizations willexperience an attack so governments andRegulators have really startedresponding to this in 2021 starting withIsrael in the United States and by 2025with regulations rolling out in Europeand Apec and many of those regulationsin the U.S just a couple months agoso now that we have a leveling of theproblem space let's start to think aboutsome of the actions that we can takeso I mentioned earlier the differencebetween what's under our control andwhat's outside our controlso think about those things outside ourcontrol how can we mitigate them well wecan increase our visibility now at therisk of being painfully obvious that youcan't secure what you can't seethere is a take-home Point here rightand it's seeing what's relevant to youand your organization and you can thinkof it in many ways the same way youthink of food right you cannot possiblySource all of the ingredients of thefood that you eat you rely on someoneelse to do that for you when you look atyour food and it has an organic labeland nutritional facts you have someassurance that someone else has testedthis for you and similarly as Andy isgoing to talk about later Google wantsto share a lot of the practices that wehave and really a list of the actualpackages with you to show you that wevetted that entire processbut in terms of how ingredients gettampered with right in terms of howthings can change unintentionallylooking at this list one in seven shouldlook pretty familiar right this is wherewe already have our visibility focusedsource and at runtime at source we havedevelopers reviewing PRS really activelylooking at the code that's beingintroducedand then at runtime we have ouroperators so we have our security teamslooking at how things work in productionbut we shouldn't take for granted twothrough six everything that happensbetween right we also should not takethat for granted in the dependenciesthat we're using we can't just count onSource control being the point wheresecurity takes place to give a goodexample of things that happen in theMiddle look at code Cove in 2021where a malicious actor got credentialsto a GCS bucket and uploaded a maliciouspackage still included the working codeeverything looked good in Source but thepackage was in the place wheredevelopers are pooling fromso now that we have a sense of why weneed to care about visibilitylet's look at all the different waysthat we can get out Beyond justvulnerabilities so one through threeshould look awfully familiar there isnothing new herewhat is new however is the place atwhich these things are being introducedright we've dealt with malware and typosquatting forever but think about typosquatting for example or using asimilarly named website that turns outto be a malicious one initially that wasintended at employees of a company orcustomers of a companyto send them to a phishing site nowhowever we're seeing the same techniquebeing applied to Developersa good example would be colorama wherecolor with the British spelling with anadditional U contained a maliciouspackage so for anyone who naturallyspells color with a u it was veryintentionally easy to bring this in andthe mitigations to this you know thinkabout it just looking at cves is notgoing to catch something of this naturewhich you need is threat intelligenceyou need to have insight into how theopen source packages are being used likehow many people are consuming it there'sa lot more than just the traditionalvulnerabilitiessimilarly Beyond vulnerabilities there'show things work in production in runtimeand this has been a big focus onapplication security where all the noiseof cves and CVSs scores that were notrelevant to an organization you know hascome to a head and we realize it'soverwhelming it's combinatoriallyexplosive we care about the things thatapply to us not every singlevulnerability Under the Sun so seeingthe way that vulnerabilities can bechained together and especially in ourdependencies which is sometimesconcealed from us is key hereso now that we have a sense of the needto increase visibility right not just ingeneral but in depth to the things thatmatter to us and also a sense that we'renot just managing vulnerabilitiesthere's active threats early in ourenvironmentlet's start to think abouthow we can forma consistentway of determining whether to know ortrust a supplier right this is this isrequirementand you look at this initially and yousay well how do I know or trust anyonebut there's a consistent set of traitsthat we can look for that helps to giveus assuranceand there's a lot here the through lineis that if one of these fails the othersare like a strand of rope that supportthe rest of the process right and Ireally want to call your attention totwo and eight provenance and attestationand showing evidence of assurancelooking back at our ingredients this isreally our way of saying for all thepotentially millions of transitivedependencies we're usingwe have as best a sense as possible thatthey have gone through the right processto deliver this to us so with all thatsaid I want to introduce Andy back tothe stage to show some of the solutionsthat we have thanks Aaronsohow many of you folks have heard abouts-bombs raise your handhow many folks think you know whatyou're going to be doing with yours-bombsright so I think one of the key thingsthat says Aaron pointed out it's superimportant to know your surface your taxsurface so all the pieces that composeyour software so s-bombs do a great jobthere but as we'll talk a little bitmore there's nuances about both wheres-bombs are generated the type ofinformation you get from them today thatset a Min bar and where more you can dowith themso minimally Cesar's requirements notsurprisingly are you obviously have toidentify your package you know where itcame from you know the vulnerabilitiesyou know the dependency chainyou know you know how the licensing andwhen this was last checkedthe challenge is there are multiple waysfor you to get us bombs so when you lookat the source code side you're gettingessentially the build information of allthe possible things that can be pulledin as you go through the pipeline youstart mixing build dependencies withpotentially packaging and runtimedependencies and ultimately you knowwhen you get into production you havedependency injection cases you havecases where different aspects of thecode talk replicated versions offunctions call slightly differentdependencies so it's important to knowas you go through here what informationis solid and assured at each point andwhat you actually have to make up fornice thing about runtime you'll seeespecially in things like Java just thedependencies you pull in but you won'tthen see by their name what the transitdependencies there are from there so youhave to stitch it all togetherkey thing then is using the version ofthe s-bomb when you've gotten it for theright purpose right so number one as wetalked about your attack surface yourdependencies are not static they'reDynamic you know what you have in buildonly a subset of those are likely to beused by the calling function the callgraph the actual running and it canchange run to run so being under able tounderstandhow those dependencies are being used ifyou've pinned the dependencies soactually you get a specific knownversion or it's a you know a range or aversion above so now what you'redependent on will change over time asthe package updates those are all thingsthat you have to factor in when youstart generating your s-bomb if yourgoal first and foremost is to establishyou know a basic list that you can serveto othersyou're able to do that effectively butyou have to dive in more if you actuallywant to use these now to effectivelyimpact your securityso as the surface of pencies can evolvein change over time with the stage it'simportant also to figure out and I thinkmost of us have seen this it's actuallypretty straightforward to find big listsof vulnerabilities the hard part is tofigure out how to prioritize them whichones are relevant and ultimately whichones are exploitable because if you havelimited resources you need to focus onthe ones that have the most risk andsecurity impact and some of thecharacteristics of what gets involved indetermining what to prioritize arenumber one not surprisingly the natureof the vulnerability itself it'scriticality but also important is whatelse is in the code that you're runningand are there chainable paths betweendifferent vulnerabilities which may notbe as critical but together allow acustomer to explore the threat actor toexploit things and then at each stageare things reachable right so if you'rerunning an innovation workload in atotally clean room air gap area networkvulnerabilities are probably lessimpactful if you're running it on thepublic internet they're hugely impactfuland then the other piece that's missingin traditional app security from purelythe workload and application side iswhat's the effect and impact withcontextual security so applicationsdon't run in a vacuum they run in anactual infrastructure with securitycontrols that are in the environmentaround it so if whether you have WAFFrules you have rasp you have otherTechnologies in place that can blockparticular types ofinput injection those also impactwhether the particular vulnerability iscritical to you in context so net netthat effective security and risk isreally a function of the intersection ofwhat's reachable and callable and whatis the Environmental applied securitycontrolsin addition as we just talked aboutthrough the different places you can getat spam it's important again to know thelimitations of where you're pulling thes-bomb from how much Insight it's givingyou either into the list of dependenciesyou have and the ones that matterand then I think there's you know animportance to think about Assurance likewhat is the guarantee that the s-bombyou're generating reflects the truestate so again if you're scanningbinaries you're going to get thepackages that are listed in depancy butyou're not necessarily going to just gettheir Transit dependencies because thoseare called by that package unless youhave to then scan the binary of thoseand so it's important as a providervesponds to understand where thoseboundaries are to be clear and declarefor your customers internal externalwhether security regulatory audit whatyou actually control and where thatlimit is forvulnerabilities for dependencies and forthe chaining of those togetherspecifically if you don't get thedependency list you've now left a hugeattack surface that's available andexploitable by bad guysand for us at Google as Aaron pointedout Beyond just the minimal things youput into s-bombs we think about the plusplus right in addition knowing whatsecurity tools were run against thatwhat versions of those security toolsunderstanding the community health thepackage Health the contributor healthand risk right understanding whether themost recent PRS and updates areanomalous or in line understanding howoverall the community responds toPatches those are additional pieces ofinformation understanding the posture ofthat project through something likeopenssf security scorecard those areadditional pieces of information thathelp you assess the risk of a particularpackage as you guys choose to allow itas you guys choose to use it andunderstand how quickly it updatesone of the things we do in Google cloudis we try to make this easier for you atthat first step of managing s-bombs soour artifact registry product allows youfirst tofor any set of packages or images in ARexport and generate a spont files inspdx format in addition for any spdx ors-bomb files you can query those usingour container analysis apis tounderstand the details of those thingsthird if you want to make this a centralhome for us bombs you can ingest usbombs and there will be a cataloged andprocess the same wayand staying tuned we also were going tobe implementing push generation so youcan load artifacts and as soon as anartifact is loaded into artifactregistry it will generate s-bombs in SPXformat as wellin addition a corollary to the s-bombsis the Vex information we just talkedaboutit's not sufficient just to know thereare critical vulnerabilities it's partof the responsibility ultimately for youto understand and manage your softwarestate to understand and communicate ifyour software is affected by thatvulnerabilityif you understand how to fix it or ifit's still under investigation sosimilarly artifact registry today allowsyou to manage vexstatements and Vex files within AR youcan ingest them and then you can eitherquery them through apis or in the GoogleCloud UI you can view them display themandoverall understand them betterthe fifth item we're going to focus onis really the concept of provenance andattestations this gets back to thattheme that Aaron talked about about therisk patterns related to integrityso Integrity matters and it's importantthen as you go through the process tounderstand what's happening to theartifacts as they go forwardso when you think about Provinceannastation number one you have to logevents you have to know what actually ishappening in the transformation of thoseartifacts as they go through thepipeline number two attribution who isdoing the actions whether it's a human amachine a serviceand then number three how are youvalidating that that log is correctright at a station so having separate atesters be able to look over the logsmake sure the actions they're beingattacked are being recorded are correctand then sign them so they're tamperevident this gets into signatures one ofthe key aspects of how we do things atGoogle is at every stage we sign theartifact on ingest on egress thereforeable to check at each stage of thepipeline the integrity and in fact ifthe policies that we inspect to havehappen have actually happened for thatsomething that now is pushing forward toan underlying infrastructure is theability to use now public ledgers thingslike Sig store as a technology so thatnot only within your own view youunderstand what is the Integrity what'sthe evidence around a particular packagebut now in a public Ledger for youreither your partners your customers theability to have that type ofconfidence and validation be able to bechecked without your interventionand last thing is to apply policy rightso this is great to have attestationprovenance and tracking if you're notgoing to actually then use that tocontrol the ability for something toprogress through the pipeline thenyou're not really taking full advantageof the opportunity herethe half thing that we talked about isyou know at the end of the day there aremany good software security and softwaresupply chain Frameworksa key thing that we would advise is foryou guys to pick one right because youneed to understand how you Baselinewhere you are today and what are thesteps to get betterand so classically you need to take thefirst stepand if you don't start measuring there'sno path then to improve so if you lookat a couple salsa which has its originsin Google and how we do software supplychain security its main focus is on afew things Integrity logical controlpoints like a single build servicenon-unilateralism and ultimatelyProvidence and attestation so you canunderstand and prove the Integrity ofthe artifacts through throughout if youlook at ssdf a lot of the work is aroundhow you as a developer work throughthings section four in the 1.1 expandsto include the executive order piecesaround software supply chain so ourrecommendation is you know there are alot of good Frameworks make sure theframework that you're picking has a keycomponent and guidance and measurablesaround software supply chain as anadditional vector and then what'simportant is to get startedso first step do you know how opensource or external code gets into yoursystem to do you have an inventory ofall the different ways your developmentteams actually can pull code into yoursystem and are you controlling themright so without that you're gonna notbe able to stop the bleeding next Onceyou understand how the paths are do youhave a sense of what you're actuallyusing right of the different packages inproductiondo you know which versions how manydifferent versions which types ofpackagesif you're using containers do you have ahuge image registry of which only one ortwo are actually in production theability to understand andwhat you're using is going to help youin remediation response the newsignificant vulnerability comes upand then on the other side of ingestright how many different paths are therefor development teams to get toproductionright that's another opportunity for youto put a logical choke point so you canhave many developers if you can controlingest if you can control egress toproduction you now have a coupledifferent Gates then we can startmanaging the problem space and thecomplexitynext it's important as you startmeasuring to figure out how many thingsare actually going through your plannedhappy path you know our Approach atGoogle is it's a mix of carrot and stickdevelopers are creative if you don'tmake sure this is actually beneficial tothem gives them a smoother path intoproduction you're going to getresistancealso one of the things to understandhere is from a security team standpointare you a security team that's able tobreak builds or are you a security teamthat's ultimately only able to alert thedistinction there is who gets the lastsay about something going intoproduction or whether production ishalted based on understanding that youcan then figure out you know if you area team that can break builds with greatpower comes great responsibility you'reagain really need to start looking athow many things go through the happypath because you need your developers tobe bought in especially if you're goingto be able to have the power toultimately break buildssimilar to understanding what number ofteams are going through the happy pathunderstanding what are the exceptionswhat you need to do to well categorizethose exceptions understandum you know what are the next big chunkof work to help you make your developersoverall more successful more secure asthey push things to productionand then with any framework there arepluses and miases I understand thosegaps and then you now can pivotresources to be more focused on the playareas where there are gapsso one of the ways we're looking atmaking this easier for you is with ourassured open source software serviceagain as Aaron pointed out there arefive areas of risk the one thateveryone's most familiar with is numberthree vulnerabilities and runtime butwith assured open source we try toaddress all five and we'll talk a littlebit about how so assured open source isgenerally available became generallyavailable in April it's really focusedon a few things Googlebeing one of the known and trustedsuppliers of Open Source software foryou number two taking what we do insecurity for open source for ourselvesand making that apply to packages thatyou may use from open source alsoallowing you to use packages we usewithin Google they've gone throughsecurity testingand provide enough metadata as spamindex information to help you meet yourregulatory both internal and externalsecurity and risk requirementsso number one assured open source isuseful and available whether you'rebuilding on gcp or not developers couldbe building on a laptop could bebuilding on-prem could be buildinganother cloudwe ultimately from an interconnectioninterface standpoint if you can reachMaven you can reach Pi Pi you can reachusand we're able to then serve thosesecured packages to your developersnumber two to address the issue oftooling repos and process it's built ona secure infrastructure it's built fullywithin Google using Google toolscontrolled by Google end to endwe build these packages from Source allthe way through to binaries for thesecond item we just talked a lot aboutintegrity and provenance so we fullyattest and sign the packages and gothrough our process we provide assaultto level two or salt to level three at astation that's signed for you to look atfrom a vulnerability standpoint not onlydo we manage and scan for the existingvulnerabilities in the primary thedirect dependency and the transdivs wealso use our proprietary scanningtechnology to be first defined for newvulnerabilities so in addition to justmanaging what's in the cve databasewe're actually using fuzzing and otherTechnologies to be first defined for arange of the new vulnerabilities for theinitial set that we've scanned we'reabout we find about 50 percent of allthe new vulnerabilities are found byGoogle as the first defined for criticalvulnerabilitiesin addition as we talked about it's notjust the primary it's the dependenciesand the transit dependencies so includedin our software composition analysis foropen source is dependency mapping and inmany cases transitive closure of thebuild so not only are we building fromsource for the primary we're buildingfrom Source from the dependency andwe're building from source to Transitdependenciesand as we talked about rightin addition to being able to be secureyou need to be able to demonstrate tointernal external security people riskpeople Auditors the level of yoursecurity so we provide enriched metadatathat's signed again so that's tamperevidence that's bomb data dependencydata the vulnerability impact in vaccinelicensingso today we have 2500 of the mostpopular Java and python packagesavailablewe specifically in Python also focusedon some of the key machine learning anddata packages around tensorflowscikit-learn pandas pytorchif you look at the threat vectors if youremember before right understandingcontrolling your open sourcethat's done through our generation ofassured s-bombs and vexthe critical vulnerabilities wherethey're existing or new we do scanningand management for those includingshortening the ultimate fixed definedlife cycle by being first definedfrom protection against thethings like typo squatting anddependency analysis we do originvalidation so we're making sure thatrather than your development teamspulling arbitrarily from a randomlocation we validated that where this ispulled from the core canonical locationof the source code when we build itit's in a Google secured repo so takingadvantage of the secure underlyinginfrastructure of Google cloud and gcpto secure all the artifacts the sourcecode that we're pulling through thepipelineand it's run through our process toolsand our secure repos and lastly what wedistribute to customers is sine so it'stamper evident both in the underlyingbinary as well as the metadata that weservean example of some of the things thatdifferentiate so licensing is one of theaspects of risk so for us if we lookedat the top 2300 2500 packages we served30 percent of them if you look at opensource locations and of data andinformation have either unclearuh unknown or risky licensesand so in addition to the standardscanning for licenses we haveproprietary technology in Google thatlooks at those license files and canfurther categorize those and those arethen added into the metadata for thepackages we serve and curateif we look at the way we think aboutpackage Assurance there are four levelsof package Assurance first that we dothis we talked about before originvalidation so that all the whether it'sthe images the binaries or the sourcecode is coming from the canonicallocation number two that the primarypackage is built from Source by Googleand attested the third level where we'vetransably closed the package where notonly the primary the direct dependenciesand the transitives are built fromSource within Google and the last that'sdifferentially signed by are scanned byour fuzzing technology and our remotecode execution technologyso bring this to a closekind of key takeaways are number onethere are a number of new threat andrisk factors in your tax servicetraditionally you've operated in threelooking at runtime vulnerabilities andmany of the scanning tools now move thatvulnerability finding earlier in thepipeline but as Aaron pointed out aswell we're living an environment ofactive intentional malicious actors whoare trying to inject malware into thesystem and the other four areas areareas where they're actively puttingmalware intaking a look at this and how we wouldaddress this thenplaces to start are number one know youringredients know what's actually goingin the software that you're buildingnumber two beyond the vulnerabilitymanagement vulnerability detection thinkabout the risk areas that are in yoursupply chain that malware can beinjected by an active and creativethreat actoruse known and trusted suppliers thathelps you reduce your risk and reducethe number of things you have to trustrequire high quality s-bombs that areassured and as we talked about s-bombsgenerated for the purpose you want touse them for at the stage that makessenseenforce Providence and attestation soyou now you have a record of what'shappening to the softwares ortransitions to the service andultimately pick a framework Baselinemeasure and improveso with that I'm going to bring Aaronback up there's a number of othersessions that we're doing in security ifyou have a deeper interest in securityand I want to thank you guys for yourtime"
}
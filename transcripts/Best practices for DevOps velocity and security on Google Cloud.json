{
    "title": "Best practices for DevOps velocity and security on Google Cloud",
    "presentation_type": "Breakout",
    "categories": [
        "DevOps, IT Ops, Platform Engineers, SREs",
        "OPS202"
    ],
    "video_id": "0-OvGayWb1w",
    "time": "Aug 29 02:15 PM - 03:00 PM CDT",
    "transcript": "foreign[Music]I'm Nate Avery I'm an outbound productmanager at Google and today we'llwe'll go over some practices for devopsvelocity and security on Google CloudI want to set the stage up front we'regoing to do some welcome and introswe'll talk devops culture Dora use ofcloud and then we'll have our gueststell us about their proven results and aperspective from the ground if this isnot what you thought this session wouldbe I totally understand and you're freetoanother sessionumokay so this is usumwe know that most teams are going towant to improve velocity right that'sthe rate at which changes are made andput into productionand this group of practitioners herewe all come from a variety of placesthere are some of us at Googlein product management we have softwareengineers and then we have folks fromindustry who've got great experiencedoing this and explaining it and workingwith it on a day-to-day basis the goalof all of this is to share with you reallife practices that should work we don'twant you to believe it just because wesay it but because it can work elsewhereOkay soso we'll get to get things started bytalking about Dorathat's where most of the tips are goingto come fromdevops research and assessmentis what door stands for and it willstart in 2015.Google Cloud purchased it in 2018. noweven though we bought itum we continue to to invest in it andexpand it the goal is to increasecapacity to help our customersunderstandjust how they can apply the researchthat's being done we want to make itreal and actionablein terms of the number of folks who workon this there are 33 000 professionalsworldwide who've contributed data tothis and we have lots of bright peopleand lots of bright math and all kinds ofstuff going into this to help peel backthe onion and help us understand what'sactually happening and what are thetrends and what are some of the thingsthat you can do to improve your in yourenvironmentOkay sounless you're like brand new to ityou've probably seen this beforedevops isn't just about tech it's abouttech and cultureand it feels a bit of a cliche to say itbut we kind of have to because weactually have stats to prove itwe look to the research to help usunderstand the devops world and provideus with some insightsour most recent reportit said that there was a clear drop inthe high in the elite groups and what'sinteresting about that is that itsuggests that this year's respondentswere either just starting their devopsculture or had a very poor devopsculture so again we're starting to seethat you can't just ignore itand here's another chart hereno surprise to anyone that the DreamTeam there they're performance orientedthey have above average team stabilityabove average support above averageflexibilityI mean that's kind of what it takesumso we'll take a look at some of themetricsthe report breaks down aspects ofsoftware delivery into two types speedand stabilitynow everybody wants to make thingsfaster I mean that's kind of a universaldealbut organizations will often say thatthey can have either speed or stabilityright it thinks like a trade-offand I think we've all been in placeswhere someone saidyou can have it fast or you can have itright you know which one do you wantbut what's interesting is that our datatells us that you don't have tosacrifice these at all that they're bothactuallycomplementary in their outcomes of agood environmentsothere's a lot in it to buy in if you buyinto it properly you will benefitforeignthere are four main metrics in Dora tobe aware oflead time for change that's you know howlong how long does it take for commit toget into productiondeployment frequency which is how oftenyou release softwarechange failure ratewhat percentage of releases degradeproductionand then meantime to re to restoreservicewhich is how quickly can you recover ifthere is a problemand I gotta mention something heredo not try to game these metricsit's very temptinga lot of us want to a lot of people areinto like you know trying to hit targetsbut that's not really what we're doingherethe goal of this is to measure whereyour environment isyou make a changeyou measure it again and you comparehopefully you're better off than youwere but you might not be things happenso what do you do you just do it againyou make make a change measure itcompare itsee if you're better offthe idea here is that we're going totreat our people and our teams and ourprocedures the same way we we wouldtreat software which isn't an iterativeapproachand again somethe numbersare here to just kind of solidify thisright we want you to walk away knowingthat there actually was some effort andthatthere's a reason why you should stickinto this114 times more frequent code deploymentsthree times lower change failure ratesuh what is that 23.7 times faster timeto do to deploy I mean that's kind ofnice oh sorry deploy was 26.5even bettersothere's one other aspect here I got totalk about and that's use of the cloudyeah I know I'm a cloud guy we're at acloud conferenceum I probably being paid somewhat totalk about cloudumbut again when we talk about cloud inrelation to Dora it actually works outpretty good becausewe see that for that those who are oncloud are 14 more likely to succeed intheir organization performance goalsso again we're looking at the thingsthat work and that really kind of pushthe envelope for customerssothese guys here they're just a smallsample of some of the partners we workwith definitely not an exhaustive listand now I'm going to hand things over toChristy for a demo thank youfirst try hi everybody I'm ChristyWarwick I'm a software engineer atGoogle where I co-created an open sourceCI CD framework called tectonI am so passionate about continuousdelivery that I actually wrote a bookabout it it took three years I don'trecommend it but that's not what I'mhere to talk to you about today today Iwant to show you how you can use gcp totake what Nate was saying and actuallyput it into practicesothe project that I'm going to use is onethat's in this GitHub repo here and it'sa really simple project that just showspopulation statistics for countriesbecause the truth is that ideally wewould bake all this stuff in from thestart but the reality is that it's rarethat we get to work on Greenfieldprojects we're usually working onsomething that already exists so that'swhat we're going to do today we're goingto take this project that already existsand we're going to improve the stabilitythe speed and the securityso let's take a look at this project sothe way that this project works is thatit's built into a Docker image that'sdeployed to gke and we manage thosedeployments using Cloud deploy whichsounds pretty good from the start butthere are some problemsso the team that's working on this findsthat they get outages almost every timethat they deploy as a result this hasmade them really nervous to dodeployments so if we look from a Doraperspective it's not looking great thedeployment frequency is low becausepeople are afraid to make changesbecause the deployment frequency is lowthe lead time for changes is high andthen the change failure rate is alsoreally high the one thing we have goingfor us is that cloud deploy makesrollbacks pretty easy so at least thetime to restore is pretty fast so let'sfigure out how we can improve thiswe'll take a quick look at a bug thatmanaged to make it into production sothis is a bug that made it to productionand caused an outage with the entireserviceone of the things that went wrong hereis that the change went out to all theusers at once and took everybody down soone way that we can improve that sincewe're already using Cloud deploy is thatwe can use a canary deploymentso what I'm going to do is I'm going totake my cloud deploy configuration andI'm going to add a canary deploymentstrategy so what this will do is when Imake a change instead of going out toall the users a canary deployment willbe created and it'll only hit about fivepercent of users and then a verificationwill happen so that way we'll find outif anything's wrongat the same time I'm going to useanother featureof cloud deploy and I'm going to addsome regionalization so previously Ialready created several more kubernetesclusters we have the US cluster that Iwas already showing you and then we haveone in Europe and one in Asia as well soI'm going to use a multi-target rolloutso that using Cloud deploy I can deployin parallel to all of those targets atonce and all of that will be behind thisCanary deployment so let's see what thatlooks likeso I'm going to apply my configurationthis is the world's saddest gcp clusterbecause I've been doing this to itrepeatedly for several days so hopefullyit doesn't mind so let's take a look sonow our production Target actually hasthree child targets behind it which arethe US Europe and Asia targets and it'susing a canary deployment so let's seewhat would happen if I put that samebroken change out into production nowthat I'm using a canary deploymentso I previously built an image thatcontains that bug and I'm going tocreate a new Cloud deploy releaseusing that imageso here we golet's go over and look at Cloud deploylook at our Pipeline and we should seehere's our new releaseit's cued and you can see that thecanary rollouts are about to start sowhile we wait for that I'm going to adda little bit more stability so it wouldbe great if changes didn't even make itout to production at all if they hadproblems so what I'm going to do is I'mgoing to add a staging environmentbefore the production and productionenvironmentso over here in my cloud deployconfiguration I have another kubernetescluster that I made that's going to beour staging cluster and I'm going toupdate the delivery pipeline so thatbefore anything makes it out toproduction it's going to go to stagingand the last thing I'm going to add isI'm going to add a manual approval stepbetween staging and productionso let's see what that looks likeall rightso over in Cloud deploy oh our Canaryrollout startedand you'll see that now we have astaging environment and there's a manualapproval step between staging andproduction so we'll let that Canary keepgoing hopefully it'll finish in time forme to show you but what will happen isthat the canaries will fail and then wecan roll back from that to a previousgood releaseall right so what have we accomplishedso we've added more stability toour pipeline to our application byadding Canary deployment to productionso if something does make it all the waythere that has a problem at least it'llonly get out to a small number of usersso that should make our change failurerate lower and our change failure rateshould be even lower because we canactually try things out in staging nowbefore they get there and if things domake it all the way past the canarymaybe all the way to the canary we canroll them back really easily because wejust have to roll back the canaries notthe whole thing so our time to restoreshould be even higherokay so now we've improved the stabilitynow we can work on the speed and it'simportant to note that we don't want towork on speed first because if thingsare unstable and we just start movingfaster then you'll just be pushingbroken stuff out to production fasterwhich would actually make everythingworse so we got a bit more stabilitylet's start moving a little bit fasterso it's great that we're going to get asignal from our canaries before problemshit all of our production users butwouldn't it be nice if changes didn'teven make it here at all and we couldactually find us get the signal thatsomething's broken even earlier so itturns out that in our project weactually have some unit tests alreadyand it turns out that the unit testswould have actually caught that bug thatI was showing you earlier but we'redepending on developers to run thoseunit tests manually so instead what we'dreally like is we like to stop changesfrom being merged at all if the unittests don't pass so what we're going todo is we're going to use cloud build torun tests on pull requests so that wecan catch these failures before theyactually get mergedso here's my cloud build yaml that Icreated that'll run those tests and I'mgoing to go into Cloud build I'm goingto add a triggerto run that on each pull requestso I'll run it on a pull requestI'm going to use the repository that Ialready linkedand I'm going to check this handy boxthat will make the results show up as acheck in GitHubso now let's take a look at what wouldhappen if I tried to open a pull requestthat has that bug in itso we'll create a new pull requestI'll use a branch that already has thatbugcreating the pull requestand so nowCloud build should kick in and startrunning the tests I noticed this was alittle bit slow earlier and one thingthat's a little odd is you can see thatI could just merge this right now if youwanted that to not happen you can justadd Branch protectionto your GitHub repo and you could makeit so that checks like that one fromcloud build are required before anythingcould get merged so hopefully this isgoing tokick in and run the tests if it doesn'tthen I can show you the results from aprevious runokay let's take a look at results from aprevious runso back over herewe can see this onethis was actually you know what I'llshow you it in GitHub because it'll beeven more excitingso let's look at one of the ones thatfailed previouslyI think this oneall right soover here you can see that there arechecks that ran this was my cloud buildcheck it shows a summary here you cansee the logs from the cloud build runand you get a link to Cloud build so youcan go and dig inand see morereallynot gonna run okay let me justlet me just look at the trigger reallyquickly and see if any pull requestenabled okay it's a mystery all right someanwhile let's let's pretend that thosetests actually ran and they failedwhich would catch my error at this pointI can have actually I feel bad notshowing you at least anything no okayokay so pretending that those testsfailed we can have more confidence nowthat the code that's in our repositoryis in good shape because if somethinggets merged and makes it in then we knowthat at least the tests passso with that increased confidence we canactually go a step further and how aboutwe start automatically rolling thingsout to our staging environmentcool and over here you can see that thecanary the canary deployment did failand so we can cancel that we're going toinitiate a rollout roll back to aprevious release which will give ourtests even more of a chance to actuallyrun which would be niceokay so we're rolling back that badCanary that we tried to deploy earlierno nothingnothingoh well okay so the other thing that wecan dois we can we're going to add a cloudbuild trigger that will automaticallydeploy to our staging environment so Ihave a cloud build configuration filehere that I made that builds a Dockerimage pushes it it uses artifactregistry to generate an s-bomb whichI'll be coming back to in a little bitand then it uses Cloud deploy to createa release and then waits for the releaseto be successfulso I'll add another trigger hereand this this trigger is going to happenon push to a branchlet me use this so every time that wepush to the main branch which isessentially what happens when a mergeoccurs oh you know what I know what Idid sorry I know how to fix this I knowhow to fix this hold on a second I knowwhat I didI'm just going to try one more time okaylet's try this I I uh I didn't changethe name of the cloud build yamlso on a pull request this is the onethat's going to work I'm really I'mreally exciteduh okayit's not called Cloud build yaml it'scalled Cloud build testall right and send the logs to GitHubnow I probably have to close thisbecauseand we don't want to close itand close it and reopen itit's going to be worth it it's going tobe so fantastic you'll see the test thatyou already know is going to fail failcreate pull requestrequestMagicrun the tests come on you can do it runthe test run the test okay well anywaysokay so let's create the trigger thatwe'll do our deployment to stagingall right so push do branchand it's a cloud build deployall rightnopeRepositorysecond generation repository that oneokay so it would be really nice if thatone ran too but oh well so I'm not goingto merge that because it is broken butlet's say that we caught the bug and Igo back over here and I want to fix mybugso I'm going to go over here and I'mgoing to fix the bug because we just hada little inversion in the logic that wemeant to have thereuhget push over hereall rightso over here my change is pushed thetest should run again no tests arerunningoh well mergemerge with no confidence but let'spretend that that worked okay so nowthat that's merged what will happen iscloud build will kick in againshould kick in this time and it willcreate a rollout to staging and thenonce that's there we basically at thispoint we've increased our speed becausewe are getting we're getting moresignals on our pull requests about whatthe state is and because we're deployingstraight to staging so that means it'sbasically at this point just a businessdecision about whether you want to goall the way to something like continuousdeployment where instead of a manualapproval check in the middle you couldbe maybe running some automation againststaging and then deploying right toproduction the other thing that we cando is we can actually push things evenfurther leftyou might have noticed that I've beendoing my editing in Cloud workstationsso Cloud workstations comes withminicubeand since we're using Cloud deployCloud deploy uses scaffold and scaffoldlets you do local development Loopsreally easily so what I can dois I can start running scaffold Dev andwhat this does is it uses the samescaffold configuration file that clouddeploy is using to deploy deploy toproduction it's building my image andthen it's running it locally insideCloud workstations using minicubeI just can't believe that those testsdidn't runumwhile we're waiting for thatsee if there's anything oh it well atleast it did the did the deployment butnot the tests well that is just amystery what happened there so anywaysthe merge that I did has triggered thecloud build yaml that has a deploymentwhich is doing a build and push and thenit's generating an s-bomb and then it'sgoing to create once that's completedit'll create a new rule out to stagingover hereall right so meanwhile back here we'rewaiting for our local deployment tostabilize so one other cool thing aboutCloud workstations is it does automaticport forwarding for you so the URL thatI'm going to here you might not be ableto see because it's very small it hasPort 80 in it so I'm hitting Port 80 onmy workstation in order to do this butmy using mini Cube and scaffold myapplication is running on Port 8080. soall I have to do is change the url to8080 and I can actually hit the versionof my application that's running inCloud workstations using minicube andscaffold and it will do hot reloading aswell so if I start making changes tothis it'll get rebuilt automatically andredeployed so I can actually push thingsall the way left to my local developmentenvironment and see the changes as Imake themOkay so we've increased the stabilitywe've increased the speed the last thingI want to talk to you about isincreasing the security posture of theprojectso let's take a look at some of thesethings that we've deployedto Cloud deploy so we can actually goand look at the artifacts that wedeployedand bothuhboth Cloud deploy and Cloud build havethis feature where oh that's not one Iwant to show you though because that onedoesn't[Music]cancel[Music]umI want to show you the security insightsoh that's not a good one sorry let me goover to Cloud buildagainand I want to show you the securityinsights panel for some of these so thatone should have onenow if it doesn't I will besadbuild artifacts security insightsall right okay so here is an artifactthat we built using Cloud build andusing the security insights panel we cansee that the artifact meets therequirements for salsa build level twowe can see that there was onevulnerability that was found inside theimage we can also see the Vex statementsthat were generated and stored inartifact registryand you might remember I was showing astep that generates an s-bomb usingartifact registry so this is the resultof that and then finally because we wereusing Cloud build we generated salsa 1.0provenance which you can see here that'salso stored in artifact registry andthis has all the information aboutexactly what went into building thisartifactso what you can do with this is using acombination of the Vex statements andthe s-bombs you can use those to answerquestions like this new vulnerabilitythat came out is it affecting any of myimages that are running in productionand using provenance you can createpolicies around the things that youdeploy to production for examplein my kubernetes clusters I'm using thisbinosc policy and it's using a newfeature called a salsa checkwhich is so new that you can only use itin audit mode right now so it produceslogs when images fail to check itdoesn't actually stop them from beingdeployed at least not yet but what thisdoes is it requires that anything that'sdeployed to production was built withCloud build and that it uses build ascode so that'll ensure that anythingthat's making it into production isactually using all of this automationthat we set upsoI guess the test didn't just decide torun at the end there so ignoring thatparticular issue this is how you canimprove the speed stability and thesecurity posture of your applicationsusing Cloud build Cloud deploy artifactregistry Cloud workstations and binaryauthorizationso if you're interested in doing any ofthat the repository that I was using ispublic and it has all of theconfiguration that I was using thereand in the meantime I'd like to welcomeMark to the stage from thoughtworkswho's going to be talking about someexamples from industry of devops thatshow what this actually looks like inreal lifeforeign[Applause]thank you Chrissyand may I just noteit was a wonderful demoif you don't have demo issues it meansthe demo force is not with you todayhaving done this many times myselfso I want to thank both Nate and Christyforintroducing Dora and the concepts ofDora very very important subjectand also for a wonderful demoandI must say thatwhere am I okay there we areandso first of all let me introduce myselfI'm Mark RichterI'm the head of practice at thoughtworksfor Google cloud in North Americabenefits for about a dozen years I'vebeen using Google Cloud for about eightof those years and I'm you I've beenusing a Google Cloud workstation for allof my development since last Novemberwhich leads me to say that I don't knowwhere you are but from where I am Googlecloud is the only Cloud you needum and as some of you may know uh tointroduce going forward here with someresults thoughtworksindeed pioneeredum continuous integration and continuousdeliveryabout eight years ago and it was firstpublished by jez Humble in his seminalbook continuous deliveryin 2011.andwhat I want to what I want to go into istaking that those Concepts Andorra andtalking to you aboutwhat this means in terms of deliveringactual business value from doingcontinuous integration and continuousdelivery because at the end of the daywhy do we do this stuff we do this toderive business value for our companiesfrom these techniques right so thatwe're more profitable and we keep peopleemployedso let me talk first about a huge globalElectronic Component manufacturing firmthis firm client of ours 100microservicesand they brought us inwe used domain driven designto strangulate a legacy of cotsapplication software into a microservicearchitecturebuilding it and deploying it using cincdand you can see the impressive resultshere impressive results like thismean that the Rapid Release and newfeatures to production is now businessas usual for this companyso and and let me emphasize that gettingto the point where you're releasingmultiple times a week potentiallymultiple times a day you're committingcode to production you havemultiple times a day you have highconfidence that you're not breakingthings why because you're running tonsof automated tests against it all partof the processand then you're measuringyou're measuring using the four keymetricsso this is a very very notableautomobile manufacturerand here we help them with 50microservices Reaching Across allaspects of the business sales aftersales Parts marketing e-commerce and CRMnow they see less than a weeklead time to changethey can deploy tested reliable code toproduction every daythe meantime to recover from failure isunder an hournow 20 years ago working for anothercompany anddoing an e-commerce productI would have given my left leg for anmttr under an hourso this is a really big dealand it's not rocket sciencenone of it is it's all achieved throughdisciplineand automation lots and lots ofautomationthis Bankasked us to help them with thereliability of their release processand so we introduced radically moreautomated testingand achieved continuous delivery whichagain is business as usual for them nowso finally this telecommunications firmbrought us they brought us in to helpthem with Comprehensive agilemodernizationand they now have the capability to doover 250 releases a yearcompared to just five releases a year inthe old daysthink about that think think about thebusiness value in being able to reliablypush 250 releases into production a yearcompared to fivewith high confidencesothat's that's my little presentation ofsome really I mean these are real worldexamples of things that we have done forour clientsif you'd like to talk to us more aboutthis you can visit thoughtworks in Booth1709 down in the exhibit halland to wrap things up I will hand off toshomo who's going to talk about devopson the groundforeign[Applause]okay so I generally say very boldstatements and bear with me becauseyou're gonna judge me but don't do ituntil I finishso forget deployment frequencyuh forget velocityforget lead time forget Automation andI'm going to prove to you why everystatement I just said is truedevops at the score is not what I'mgoing to share today it's devops thateverybody should be doing and the waythe way the way they should be doing itso if I'm not going to focus on themetrics of Dora right now we'll get tohow you complement Dora but Dora canactually hide huge epic failures metricscan hurt a lot of people the reasonbeing is businesses have responses topressures to show good metrics versusactually correcting the problem itselfso let's start with principlesif I need devops velocity or let's callit happiness which is really what we'reafter it's not speed it's happiness anddevops is the ability to collaboratewith others that are part of a whole fordelivery you need see alignment so wehave three principles in each principleactually results in devops functioningat Elite practiceso the chro is concerned with peopleleaving companies people feelingunhealthy people having mental healthissues which is a real thing forFrontline people people who dodeployments and worry about the companyhow it's going to resolve issuesthe value has to be delivered in a waythat is separate from you enjoying yourlifesimple principle but we'll supportorchestration not automation automationismaintained by people who are smesorchestration links automation togetherwhich releases that person from havingto be thereceio principle you may not changeexisting services or machines thispromotes CI CD this promotes deploymentstrategies this promotes immutableenvironments this just promotes notkeeping changes that we consider to beoh I wasn't expecting that to happen thereason it happened is you have drift youhave a lot of environments that youdon't know what they are you don't knowthe state of them so don't change themmake new onesthe third one is nobody has access toShared environments again this is beyondzero trust it's absent trust removeaccess you don't require entirely andhave CISD and get flow get up toactually build and deploy so you don'tneed to go into environments so thishelps advance observabilityto full stack observability havingTelemetry and metrics that you requireagain devops principles for happinessall of these try to make sure that youare not the hero that takes a toll whenbad happens you are not the herowhen something needs to be deployed youare not the hero that has to make demoswork which you can'tnot specific here it's every demo everydemoso I'm going to actually go into themath and I'll there's some stuff that'snot shared here so how doesorganizations actually fix and presentthese metricsyou can add peoplethere's a downside to adding peoplea large downside because you distributethe work across a lot of people you loseyour smeeze we're not looking at that inDora metricsyou could remove steps that's everydigital team at every company they justsay well I have no regulations I canjust do it without all these steps andgo straight to production wickedly fastreally shitty quality really badconfidence right because you're justskipping things you're missing thingsthe last one is essentially resilienceand orchestration right you're going toimprove efficiency which is really whatyou should be targeting not automationbecause automation again is maintainedby smes it ruins your life you have tobe around who here hasn't had to work onansible errors exit codesright you have to manage it put it intoorchestration so your your your testsalways operate in a consistent fashionbecause they're run in a consistentfashion so why is time to Market andrelease frequency irrelevant they'rejust pressures I could make it upI could do weekly I could do dailywhat's good ruining livesprobably not so how are you getting yourmetrics so essentially what you shouldbe targeting is efficiencybased on the human effort required torelease forget run time again if I havelead time and I want to release but Ihave to do old appropriate testing toprevent outages let it run who's itaffecting nobody the software goes outwhen it needs to with the appropriatecontrols testing that's orchestratedso again lead time time to Marketrelease frequency oh you don'tneed those metrics you need to know howis it hurting people how are the teamsworking together Which business processisn't included and make sure theorchestration does that for youso this is the how so that's how youmeasure it Dora does measure pain butyou can hide Pain by hiring people youcan hide Pain by skipping steps and thenyou get your deployment frequency itlooks great on paper but ruins livesbut what does what does good look likeif I'm doing the mathematics because youyou can actually make it into equationfor everythingInnovation potential is basically afunction of spare time so let's say youassign a certain amount of Engineersevery engineer has something like 20 oftheir time related to the applicationwhich is reasonable they get familiarwith the app their smee's but you alsoneed spare time to innovate what's toomuchso like you have to balance this it'sit's kind of like an equilibrium youneed to find a place where someone'sengaged enough but still has spare timeto innovate and it's complicated that'swhat door should be focusing onso that you reduce heroics but you alsodon't destroy your smee's it's it'sagain a balanceagain resilience is a function of theefficiency of the whole process be it QAtesting be it Dev testing deploymentsall of that stuff how efficient is theseare those processes I guarantee in thisentire room QA is most likely the mostinefficient and that's why we can't getout very quickly again because therehasn't been much investment on QAautomation as of yetuh which gets orchestrated I don't wantto step in that oneum again sustainability is a function ofidle time how many people here and I'llask question how many people here run anon-prod environment that runs all thetime you never destroy it or turn it offso we're killing the planetright so the context I always go with ananalogy you if you if you lease a car oryou rent a car if you're not using itwhat did you return the rentalyou're paying for it in this case theenvironment pays for water heatingcooling all of that but we leaveenvironments sitting if you go back tothe principles where you youdon't change an existing machine thenwhy would I leave a machine running Ihave the ability to create it anddestroy it it's all linked together andits intent is to prevent idle time againthose idle systems become hard for us tomanage again ruining lives but again ifwe go back to Dora and we take metricsthat go I release daily frequentlyhourly whatever it is what does it meanto the people behind it do we actuallymeasure the impact to the individualsthat bear this burden as we increase thefrequency do we have the resilience tomanage the business pressureso epic failures can occur withfantastic Dora metrics unless we measurethe impact on the humanwhich is each of usI'll stop thereI don't want to take too much any I cankeep goingsoI'll go back here and try to go into thecapabilities that you achieve uhfor one most organizations without theseprinciples you don't have alignment fromleaders so devops only occurs when allthe business processes people technologyand experience I don't know why we stilluse people process like technotechnology experiences where thehappiness occurs experience is whatyou're actually after the to make surethe experience across the entire itorganization occursyou you have the metrics you require tobe informed of your environment and yourapplicationsyou do not persist environments justbecause it's convenient to leave it it'sactually not convenient to leave it ithas huge tolls on people maybe notyourself but on other other members ofthe organization and then generally ororganizations think buying tools fixthings because they bought Automationand they're like it's 40 automated butthe reality is you should be focusing onwhat what are people doing when are theyspending their time slack productivitysays how many messages do you send Iwant to know how many messages are atnight I want to know how many messagesare on weekends do they present thatdata no they just whoever can get thehighest number of uh messages is thebestso the context here is if you go byprinciple versus metrics the metricswill result from maintaining yourprinciples which is what we should allbe doing this is the piece that'smissing it's not about showing metricsthat look good it's about making surethe people who work with you are happyand enjoying their work and hopefullyyou drive down attrition and you don'tlose or ruin anybody's lives maintaindevops happiness not velocitythanks[Applause]all right thank you everyoneone more thingI can't really talk about it but pleasekeep looking out this week there may besomething more that happensyeahwith that uh here's some other sessionsto check out they're all good they'regreat one of them might even have me init again andum yeah that's it go to lunch"
}